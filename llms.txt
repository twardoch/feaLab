This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
docs/
  pydocs/
    feaLab/
      writers/
        index.html
        kernFeatureNoWriter.m.html
        markFeatureNoWriter.m.html
      hb_render.m.html
      index.html
  _config.yml
  index.html
Lib/
  feaLab/
    test/
      LICENSE.txt
    writers/
      kernFeatureNoWriter.py
      markFeatureNoWriter.py
    hb_render.py
    hb_scripts3.py
pydocs/
  feaLab/
    writers/
      index.md
      kernFeatureNoWriter.m.md
      markFeatureNoWriter.m.md
    hb_render.m.md
    index.md
.gitignore
install-macos.command
LICENSE.txt
makedocs.py
py-requirements.txt
README.md
setup.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/pydocs/feaLab/writers/index.html">
<!doctype html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

    <title>feaLab.writers API documentation</title>
    <meta name="description" content="" />

  <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300' rel='stylesheet' type='text/css'>
  
  <style type="text/css">
  
* {
  box-sizing: border-box;
}
/*! normalize.css v1.1.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/**
 * 1. Prevent system color scheme's background color being used in Firefox, IE,
 *    and Opera.
 * 2. Prevent system color scheme's text color being used in Firefox, IE, and
 *    Opera.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 4. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    background: #fff; /* 1 */
    color: #000; /* 2 */
    font-size: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 4 */
    -ms-text-size-adjust: 100%; /* 4 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */

html,
button,
input,
select,
textarea {
    font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

h2 {
    font-size: 1.5em;
    margin: 0.83em 0;
}

h3 {
    font-size: 1.17em;
    margin: 1em 0;
}

h4 {
    font-size: 1em;
    margin: 1.33em 0;
}

h5 {
    font-size: 0.83em;
    margin: 1.67em 0;
}

h6 {
    font-size: 0.67em;
    margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

blockquote {
    margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */

p,
pre {
    margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */

q {
    quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */

q:before,
q:after {
    content: '';
    content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */

/**
 * Address margins set differently in IE 6/7.
 */

dl,
menu,
ol,
ul {
    margin: 1em 0;
}

dd {
    margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */

menu,
ol,
ul {
    padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */

nav ul,
nav ol {
    list-style: none;
    list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

  </style>

  <style type="text/css">
  
  html, body {
    margin: 0;
    padding: 0;
    min-height: 100%;
  }
  body {
    background: #fff;
    font-family: "Source Sans Pro", "Helvetica Neueue", Helvetica, sans;
    font-weight: 300;
    font-size: 16px;
    line-height: 1.6em;
  }
  #content {
    width: 70%;
    max-width: 850px;
    float: left;
    padding: 30px 60px;
    border-left: 1px solid #ddd;
  }
  #sidebar {
    width: 25%;
    float: left;
    padding: 30px;
    overflow: hidden;
  }
  #nav {
    font-size: 130%;
    margin: 0 0 15px 0;
  }

  #top {
    display: block;
    position: fixed;
    bottom: 5px;
    left: 5px;
    font-size: .85em;
    text-transform: uppercase;
  }

  #footer {
    font-size: .75em;
    padding: 5px 30px;
    border-top: 1px solid #ddd;
    text-align: right;
  }
    #footer p {
      margin: 0 0 0 30px;
      display: inline-block;
    }

  h1, h2, h3, h4, h5 {
    font-weight: 300;
  }
  h1 {
    font-size: 2.5em;
    line-height: 1.1em;
    margin: 0 0 .50em 0;
  }

  h2 {
    font-size: 1.75em;
    margin: 1em 0 .50em 0;
  }

  h3 {
    margin: 25px 0 10px 0;
  }

  h4 {
    margin: 0;
    font-size: 105%;
  }

  a {
    color: #058;
    text-decoration: none;
    transition: color .3s ease-in-out;
  }

  a:hover {
    color: #e08524;
    transition: color .3s ease-in-out;
  }

  pre, code, .mono, .name {
    font-family: "Ubuntu Mono", "Cousine", "DejaVu Sans Mono", monospace;
  }

  .title .name {
    font-weight: bold;
  }
  .section-title {
    margin-top: 2em;
  }
  .ident {
    color: #900;
  }

  code {
    background: #f9f9f9;
  } 

  pre {
    background: #fefefe;
    border: 1px solid #ddd;
    box-shadow: 2px 2px 0 #f3f3f3;
    margin: 0 30px;
    padding: 15px 30px;
  }

  .codehilite {
    margin: 0 30px 10px 30px;
  }

    .codehilite pre {
      margin: 0;
    }
    .codehilite .err { background: #ff3300; color: #fff !important; } 

  table#module-list {
    font-size: 110%;
  }

    table#module-list tr td:first-child {
      padding-right: 10px;
      white-space: nowrap;
    }

    table#module-list td {
      vertical-align: top;
      padding-bottom: 8px;
    }

      table#module-list td p {
        margin: 0 0 7px 0;
      }

  .def {
    display: table;
  }

    .def p {
      display: table-cell;
      vertical-align: top;
      text-align: left;
    }

    .def p:first-child {
      white-space: nowrap;
    }

    .def p:last-child {
      width: 100%;
    }


  #index {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
    ul#index .class_name {
      /* font-size: 110%; */
      font-weight: bold;
    }
    #index ul {
      margin: 0;
    }

  .item {
    margin: 0 0 15px 0;
  }

    .item .class {
      margin: 0 0 25px 30px;
    }

      .item .class ul.class_list {
        margin: 0 0 20px 0;
      }

    .item .name {
      background: #fafafa;
      margin: 0;
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 3px;
      display: inline-block;
      min-width: 40%;
    }
      .item .name:hover {
        background: #f6f6f6;
      }

    .item .empty_desc {
      margin: 0 0 5px 0;
      padding: 0;
    }

    .item .inheritance {
      margin: 3px 0 0 30px;
    }

    .item .inherited {
      color: #666;
    }

    .item .desc {
      padding: 0 8px;
      margin: 0;
    }

      .item .desc p {
        margin: 0 0 10px 0;
      }

    .source_cont {
      margin: 0;
      padding: 0;
    }

    .source_link a {
      background: #ffc300;
      font-weight: 400;
      font-size: .75em;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 1px 1px 0 #f4b700;
      
      padding: 3px 8px;
      border-radius: 2px;
      transition: background .3s ease-in-out;
    }
      .source_link a:hover {
        background: #FF7200;
        text-shadow: none;
        transition: background .3s ease-in-out;
      }

    .source {
      display: none;
      max-height: 600px;
      overflow-y: scroll;
      margin-bottom: 15px;
    }

      .source .codehilite {
        margin: 0;
      }

  .desc h1, .desc h2, .desc h3 {
    font-size: 100% !important;
  }
  .clear {
    clear: both;
  }

  @media all and (max-width: 950px) {
    #sidebar {
      width: 35%;
    }
    #content {
      width: 65%;
    }
  }
  @media all and (max-width: 650px) {
    #top {
      display: none;
    }
    #sidebar {
      float: none;
      width: auto;
    }
    #content {
      float: none;
      width: auto;
      padding: 30px;
    }

    #index ul {
      padding: 0;
      margin-bottom: 15px;
    }
    #index ul li {
      display: inline-block;
      margin-right: 30px;
    }
    #footer {
      text-align: left;
    }
    #footer p {
      display: block;
      margin: inherit;
    }
  }

  /*****************************/

  </style>

  <style type="text/css">
  .codehilite .hll { background-color: #ffffcc }
.codehilite  { background: #f8f8f8; }
.codehilite .c { color: #408080; font-style: italic } /* Comment */
.codehilite .err { border: 1px solid #FF0000 } /* Error */
.codehilite .k { color: #008000; font-weight: bold } /* Keyword */
.codehilite .o { color: #666666 } /* Operator */
.codehilite .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
.codehilite .cm { color: #408080; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #BC7A00 } /* Comment.Preproc */
.codehilite .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
.codehilite .c1 { color: #408080; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #408080; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #A00000 } /* Generic.Deleted */
.codehilite .ge { font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #FF0000 } /* Generic.Error */
.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.codehilite .gi { color: #00A000 } /* Generic.Inserted */
.codehilite .go { color: #888888 } /* Generic.Output */
.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.codehilite .gs { font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.codehilite .gt { color: #0044DD } /* Generic.Traceback */
.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.codehilite .kp { color: #008000 } /* Keyword.Pseudo */
.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.codehilite .kt { color: #B00040 } /* Keyword.Type */
.codehilite .m { color: #666666 } /* Literal.Number */
.codehilite .s { color: #BA2121 } /* Literal.String */
.codehilite .na { color: #7D9029 } /* Name.Attribute */
.codehilite .nb { color: #008000 } /* Name.Builtin */
.codehilite .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.codehilite .no { color: #880000 } /* Name.Constant */
.codehilite .nd { color: #AA22FF } /* Name.Decorator */
.codehilite .ni { color: #999999; font-weight: bold } /* Name.Entity */
.codehilite .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.codehilite .nf { color: #0000FF } /* Name.Function */
.codehilite .nl { color: #A0A000 } /* Name.Label */
.codehilite .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */
.codehilite .nv { color: #19177C } /* Name.Variable */
.codehilite .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.codehilite .w { color: #bbbbbb } /* Text.Whitespace */
.codehilite .mb { color: #666666 } /* Literal.Number.Bin */
.codehilite .mf { color: #666666 } /* Literal.Number.Float */
.codehilite .mh { color: #666666 } /* Literal.Number.Hex */
.codehilite .mi { color: #666666 } /* Literal.Number.Integer */
.codehilite .mo { color: #666666 } /* Literal.Number.Oct */
.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */
.codehilite .sc { color: #BA2121 } /* Literal.String.Char */
.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */
.codehilite .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */
.codehilite .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.codehilite .sx { color: #008000 } /* Literal.String.Other */
.codehilite .sr { color: #BB6688 } /* Literal.String.Regex */
.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */
.codehilite .ss { color: #19177C } /* Literal.String.Symbol */
.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */
.codehilite .vc { color: #19177C } /* Name.Variable.Class */
.codehilite .vg { color: #19177C } /* Name.Variable.Global */
.codehilite .vi { color: #19177C } /* Name.Variable.Instance */
.codehilite .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

  <style type="text/css">
  
/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /* Style adjustments for viewports that meet the condition */
}

@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

  </style>

  <script type="text/javascript">
  function toggle(id, $link) {
    $node = document.getElementById(id);
    if (!$node)
    return;
    if (!$node.style.display || $node.style.display == 'none') {
    $node.style.display = 'block';
    $link.innerHTML = 'Hide source &nequiv;';
    } else {
    $node.style.display = 'none';
    $link.innerHTML = 'Show source &equiv;';
    }
  }
  </script>
</head>
<body>
<a href="#" id="top">Top</a>

<div id="container">
    
  
  <div id="sidebar">
    <h1>Index</h1>
    <ul id="index">



    <li class="set"><h3><a href="#header-submodules">Sub-modules</a></h3>
      <ul>
        <li class="mono"><a href="kernFeatureNoWriter.m.html">feaLab.writers.kernFeatureNoWriter</a></li>
        <li class="mono"><a href="markFeatureNoWriter.m.html">feaLab.writers.markFeatureNoWriter</a></li>
      </ul>
    </li>
    </ul>
  </div>

    <article id="content">
      
  

  


  <header id="section-intro">
  <h1 class="title"><span class="name">feaLab.writers</span> module</h1>
  
  

  </header>

  <section id="section-items">



    <h2 class="section-title" id="header-submodules">Sub-modules</h2>
      <div class="item">
      <p class="name"><a href="kernFeatureNoWriter.m.html">feaLab.writers.kernFeatureNoWriter</a></p>
      
  

      </div>
      <div class="item">
      <p class="name"><a href="markFeatureNoWriter.m.html">feaLab.writers.markFeatureNoWriter</a></p>
      
  

      </div>
  </section>

    </article>
  <div class="clear"> </div>
  <footer id="footer">
    <p>
      Documentation generated by
      <a href="https://github.com/BurntSushi/pdoc">pdoc 0.3.2</a>
    </p>

    <p>pdoc is in the public domain with the
      <a href="http://unlicense.org">UNLICENSE</a></p>

    <p>Design by <a href="http://nadh.in">Kailash Nadh</a></p>
  </footer>
</div>
</body>
</html>
</file>

<file path="docs/pydocs/feaLab/writers/kernFeatureNoWriter.m.html">
<!doctype html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

    <title>feaLab.writers.kernFeatureNoWriter API documentation</title>
    <meta name="description" content="" />

  <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300' rel='stylesheet' type='text/css'>
  
  <style type="text/css">
  
* {
  box-sizing: border-box;
}
/*! normalize.css v1.1.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/**
 * 1. Prevent system color scheme's background color being used in Firefox, IE,
 *    and Opera.
 * 2. Prevent system color scheme's text color being used in Firefox, IE, and
 *    Opera.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 4. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    background: #fff; /* 1 */
    color: #000; /* 2 */
    font-size: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 4 */
    -ms-text-size-adjust: 100%; /* 4 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */

html,
button,
input,
select,
textarea {
    font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

h2 {
    font-size: 1.5em;
    margin: 0.83em 0;
}

h3 {
    font-size: 1.17em;
    margin: 1em 0;
}

h4 {
    font-size: 1em;
    margin: 1.33em 0;
}

h5 {
    font-size: 0.83em;
    margin: 1.67em 0;
}

h6 {
    font-size: 0.67em;
    margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

blockquote {
    margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */

p,
pre {
    margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */

q {
    quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */

q:before,
q:after {
    content: '';
    content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */

/**
 * Address margins set differently in IE 6/7.
 */

dl,
menu,
ol,
ul {
    margin: 1em 0;
}

dd {
    margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */

menu,
ol,
ul {
    padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */

nav ul,
nav ol {
    list-style: none;
    list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

  </style>

  <style type="text/css">
  
  html, body {
    margin: 0;
    padding: 0;
    min-height: 100%;
  }
  body {
    background: #fff;
    font-family: "Source Sans Pro", "Helvetica Neueue", Helvetica, sans;
    font-weight: 300;
    font-size: 16px;
    line-height: 1.6em;
  }
  #content {
    width: 70%;
    max-width: 850px;
    float: left;
    padding: 30px 60px;
    border-left: 1px solid #ddd;
  }
  #sidebar {
    width: 25%;
    float: left;
    padding: 30px;
    overflow: hidden;
  }
  #nav {
    font-size: 130%;
    margin: 0 0 15px 0;
  }

  #top {
    display: block;
    position: fixed;
    bottom: 5px;
    left: 5px;
    font-size: .85em;
    text-transform: uppercase;
  }

  #footer {
    font-size: .75em;
    padding: 5px 30px;
    border-top: 1px solid #ddd;
    text-align: right;
  }
    #footer p {
      margin: 0 0 0 30px;
      display: inline-block;
    }

  h1, h2, h3, h4, h5 {
    font-weight: 300;
  }
  h1 {
    font-size: 2.5em;
    line-height: 1.1em;
    margin: 0 0 .50em 0;
  }

  h2 {
    font-size: 1.75em;
    margin: 1em 0 .50em 0;
  }

  h3 {
    margin: 25px 0 10px 0;
  }

  h4 {
    margin: 0;
    font-size: 105%;
  }

  a {
    color: #058;
    text-decoration: none;
    transition: color .3s ease-in-out;
  }

  a:hover {
    color: #e08524;
    transition: color .3s ease-in-out;
  }

  pre, code, .mono, .name {
    font-family: "Ubuntu Mono", "Cousine", "DejaVu Sans Mono", monospace;
  }

  .title .name {
    font-weight: bold;
  }
  .section-title {
    margin-top: 2em;
  }
  .ident {
    color: #900;
  }

  code {
    background: #f9f9f9;
  } 

  pre {
    background: #fefefe;
    border: 1px solid #ddd;
    box-shadow: 2px 2px 0 #f3f3f3;
    margin: 0 30px;
    padding: 15px 30px;
  }

  .codehilite {
    margin: 0 30px 10px 30px;
  }

    .codehilite pre {
      margin: 0;
    }
    .codehilite .err { background: #ff3300; color: #fff !important; } 

  table#module-list {
    font-size: 110%;
  }

    table#module-list tr td:first-child {
      padding-right: 10px;
      white-space: nowrap;
    }

    table#module-list td {
      vertical-align: top;
      padding-bottom: 8px;
    }

      table#module-list td p {
        margin: 0 0 7px 0;
      }

  .def {
    display: table;
  }

    .def p {
      display: table-cell;
      vertical-align: top;
      text-align: left;
    }

    .def p:first-child {
      white-space: nowrap;
    }

    .def p:last-child {
      width: 100%;
    }


  #index {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
    ul#index .class_name {
      /* font-size: 110%; */
      font-weight: bold;
    }
    #index ul {
      margin: 0;
    }

  .item {
    margin: 0 0 15px 0;
  }

    .item .class {
      margin: 0 0 25px 30px;
    }

      .item .class ul.class_list {
        margin: 0 0 20px 0;
      }

    .item .name {
      background: #fafafa;
      margin: 0;
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 3px;
      display: inline-block;
      min-width: 40%;
    }
      .item .name:hover {
        background: #f6f6f6;
      }

    .item .empty_desc {
      margin: 0 0 5px 0;
      padding: 0;
    }

    .item .inheritance {
      margin: 3px 0 0 30px;
    }

    .item .inherited {
      color: #666;
    }

    .item .desc {
      padding: 0 8px;
      margin: 0;
    }

      .item .desc p {
        margin: 0 0 10px 0;
      }

    .source_cont {
      margin: 0;
      padding: 0;
    }

    .source_link a {
      background: #ffc300;
      font-weight: 400;
      font-size: .75em;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 1px 1px 0 #f4b700;
      
      padding: 3px 8px;
      border-radius: 2px;
      transition: background .3s ease-in-out;
    }
      .source_link a:hover {
        background: #FF7200;
        text-shadow: none;
        transition: background .3s ease-in-out;
      }

    .source {
      display: none;
      max-height: 600px;
      overflow-y: scroll;
      margin-bottom: 15px;
    }

      .source .codehilite {
        margin: 0;
      }

  .desc h1, .desc h2, .desc h3 {
    font-size: 100% !important;
  }
  .clear {
    clear: both;
  }

  @media all and (max-width: 950px) {
    #sidebar {
      width: 35%;
    }
    #content {
      width: 65%;
    }
  }
  @media all and (max-width: 650px) {
    #top {
      display: none;
    }
    #sidebar {
      float: none;
      width: auto;
    }
    #content {
      float: none;
      width: auto;
      padding: 30px;
    }

    #index ul {
      padding: 0;
      margin-bottom: 15px;
    }
    #index ul li {
      display: inline-block;
      margin-right: 30px;
    }
    #footer {
      text-align: left;
    }
    #footer p {
      display: block;
      margin: inherit;
    }
  }

  /*****************************/

  </style>

  <style type="text/css">
  .codehilite .hll { background-color: #ffffcc }
.codehilite  { background: #f8f8f8; }
.codehilite .c { color: #408080; font-style: italic } /* Comment */
.codehilite .err { border: 1px solid #FF0000 } /* Error */
.codehilite .k { color: #008000; font-weight: bold } /* Keyword */
.codehilite .o { color: #666666 } /* Operator */
.codehilite .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
.codehilite .cm { color: #408080; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #BC7A00 } /* Comment.Preproc */
.codehilite .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
.codehilite .c1 { color: #408080; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #408080; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #A00000 } /* Generic.Deleted */
.codehilite .ge { font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #FF0000 } /* Generic.Error */
.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.codehilite .gi { color: #00A000 } /* Generic.Inserted */
.codehilite .go { color: #888888 } /* Generic.Output */
.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.codehilite .gs { font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.codehilite .gt { color: #0044DD } /* Generic.Traceback */
.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.codehilite .kp { color: #008000 } /* Keyword.Pseudo */
.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.codehilite .kt { color: #B00040 } /* Keyword.Type */
.codehilite .m { color: #666666 } /* Literal.Number */
.codehilite .s { color: #BA2121 } /* Literal.String */
.codehilite .na { color: #7D9029 } /* Name.Attribute */
.codehilite .nb { color: #008000 } /* Name.Builtin */
.codehilite .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.codehilite .no { color: #880000 } /* Name.Constant */
.codehilite .nd { color: #AA22FF } /* Name.Decorator */
.codehilite .ni { color: #999999; font-weight: bold } /* Name.Entity */
.codehilite .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.codehilite .nf { color: #0000FF } /* Name.Function */
.codehilite .nl { color: #A0A000 } /* Name.Label */
.codehilite .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */
.codehilite .nv { color: #19177C } /* Name.Variable */
.codehilite .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.codehilite .w { color: #bbbbbb } /* Text.Whitespace */
.codehilite .mb { color: #666666 } /* Literal.Number.Bin */
.codehilite .mf { color: #666666 } /* Literal.Number.Float */
.codehilite .mh { color: #666666 } /* Literal.Number.Hex */
.codehilite .mi { color: #666666 } /* Literal.Number.Integer */
.codehilite .mo { color: #666666 } /* Literal.Number.Oct */
.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */
.codehilite .sc { color: #BA2121 } /* Literal.String.Char */
.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */
.codehilite .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */
.codehilite .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.codehilite .sx { color: #008000 } /* Literal.String.Other */
.codehilite .sr { color: #BB6688 } /* Literal.String.Regex */
.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */
.codehilite .ss { color: #19177C } /* Literal.String.Symbol */
.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */
.codehilite .vc { color: #19177C } /* Name.Variable.Class */
.codehilite .vg { color: #19177C } /* Name.Variable.Global */
.codehilite .vi { color: #19177C } /* Name.Variable.Instance */
.codehilite .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

  <style type="text/css">
  
/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /* Style adjustments for viewports that meet the condition */
}

@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

  </style>

  <script type="text/javascript">
  function toggle(id, $link) {
    $node = document.getElementById(id);
    if (!$node)
    return;
    if (!$node.style.display || $node.style.display == 'none') {
    $node.style.display = 'block';
    $link.innerHTML = 'Hide source &nequiv;';
    } else {
    $node.style.display = 'none';
    $link.innerHTML = 'Show source &equiv;';
    }
  }
  </script>
</head>
<body>
<a href="#" id="top">Top</a>

<div id="container">
    
  
  <div id="sidebar">
    <h1>Index</h1>
    <ul id="index">


    <li class="set"><h3><a href="#header-classes">Classes</a></h3>
      <ul>
        <li class="mono">
        <span class="class_name"><a href="#feaLab.writers.kernFeatureNoWriter.KernFeatureWriter">KernFeatureWriter</a></span>
        
          
  <ul>
    <li class="mono"><a href="#feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.__init__">__init__</a></li>
    <li class="mono"><a href="#feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.write">write</a></li>
  </ul>

        </li>
      </ul>
    </li>

    </ul>
  </div>

    <article id="content">
      
  

  


  <header id="section-intro">
  <h1 class="title"><span class="name">feaLab.writers.kernFeatureNoWriter</span> module</h1>
  
  
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.kernFeatureNoWriter', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.kernFeatureNoWriter" class="source">
    <div class="codehilite"><pre><span></span><span class="k">class</span> <span class="nc">KernFeatureWriter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Skips generating the kern feature.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font</span><span class="p">):</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">linesep</span><span class="o">=</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;&quot;</span>
</pre></div>

  </div>

  </header>

  <section id="section-items">


    <h2 class="section-title" id="header-classes">Classes</h2>
      
      <div class="item">
      <p id="feaLab.writers.kernFeatureNoWriter.KernFeatureWriter" class="name">class <span class="ident">KernFeatureWriter</span></p>
      
  
    <div class="desc"><p>Skips generating the kern feature.</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.kernFeatureNoWriter.KernFeatureWriter', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.kernFeatureNoWriter.KernFeatureWriter" class="source">
    <div class="codehilite"><pre><span></span><span class="k">class</span> <span class="nc">KernFeatureWriter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Skips generating the kern feature.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font</span><span class="p">):</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">linesep</span><span class="o">=</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;&quot;</span>
</pre></div>

  </div>
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#feaLab.writers.kernFeatureNoWriter.KernFeatureWriter">KernFeatureWriter</a></li>
          <li><a href="/__builtin__.object.ext">__builtin__.object</a></li>
          </ul>
          <h3>Methods</h3>
            
  <div class="item">
    <div class="name def" id="feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.__init__">
    <p>def <span class="ident">__init__</span>(</p><p>self, font)</p>
    </div>
    

    
  
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.__init__', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.__init__" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.write">
    <p>def <span class="ident">write</span>(</p><p>self, linesep=&#39;\n&#39;)</p>
    </div>
    

    
  
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.write', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.kernFeatureNoWriter.KernFeatureWriter.write" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">linesep</span><span class="o">=</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&quot;&quot;</span>
</pre></div>

  </div>
</div>

  </div>
  
      </div>
      </div>

  </section>

    </article>
  <div class="clear"> </div>
  <footer id="footer">
    <p>
      Documentation generated by
      <a href="https://github.com/BurntSushi/pdoc">pdoc 0.3.2</a>
    </p>

    <p>pdoc is in the public domain with the
      <a href="http://unlicense.org">UNLICENSE</a></p>

    <p>Design by <a href="http://nadh.in">Kailash Nadh</a></p>
  </footer>
</div>
</body>
</html>
</file>

<file path="docs/pydocs/feaLab/writers/markFeatureNoWriter.m.html">
<!doctype html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

    <title>feaLab.writers.markFeatureNoWriter API documentation</title>
    <meta name="description" content="" />

  <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300' rel='stylesheet' type='text/css'>
  
  <style type="text/css">
  
* {
  box-sizing: border-box;
}
/*! normalize.css v1.1.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/**
 * 1. Prevent system color scheme's background color being used in Firefox, IE,
 *    and Opera.
 * 2. Prevent system color scheme's text color being used in Firefox, IE, and
 *    Opera.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 4. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    background: #fff; /* 1 */
    color: #000; /* 2 */
    font-size: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 4 */
    -ms-text-size-adjust: 100%; /* 4 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */

html,
button,
input,
select,
textarea {
    font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

h2 {
    font-size: 1.5em;
    margin: 0.83em 0;
}

h3 {
    font-size: 1.17em;
    margin: 1em 0;
}

h4 {
    font-size: 1em;
    margin: 1.33em 0;
}

h5 {
    font-size: 0.83em;
    margin: 1.67em 0;
}

h6 {
    font-size: 0.67em;
    margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

blockquote {
    margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */

p,
pre {
    margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */

q {
    quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */

q:before,
q:after {
    content: '';
    content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */

/**
 * Address margins set differently in IE 6/7.
 */

dl,
menu,
ol,
ul {
    margin: 1em 0;
}

dd {
    margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */

menu,
ol,
ul {
    padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */

nav ul,
nav ol {
    list-style: none;
    list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

  </style>

  <style type="text/css">
  
  html, body {
    margin: 0;
    padding: 0;
    min-height: 100%;
  }
  body {
    background: #fff;
    font-family: "Source Sans Pro", "Helvetica Neueue", Helvetica, sans;
    font-weight: 300;
    font-size: 16px;
    line-height: 1.6em;
  }
  #content {
    width: 70%;
    max-width: 850px;
    float: left;
    padding: 30px 60px;
    border-left: 1px solid #ddd;
  }
  #sidebar {
    width: 25%;
    float: left;
    padding: 30px;
    overflow: hidden;
  }
  #nav {
    font-size: 130%;
    margin: 0 0 15px 0;
  }

  #top {
    display: block;
    position: fixed;
    bottom: 5px;
    left: 5px;
    font-size: .85em;
    text-transform: uppercase;
  }

  #footer {
    font-size: .75em;
    padding: 5px 30px;
    border-top: 1px solid #ddd;
    text-align: right;
  }
    #footer p {
      margin: 0 0 0 30px;
      display: inline-block;
    }

  h1, h2, h3, h4, h5 {
    font-weight: 300;
  }
  h1 {
    font-size: 2.5em;
    line-height: 1.1em;
    margin: 0 0 .50em 0;
  }

  h2 {
    font-size: 1.75em;
    margin: 1em 0 .50em 0;
  }

  h3 {
    margin: 25px 0 10px 0;
  }

  h4 {
    margin: 0;
    font-size: 105%;
  }

  a {
    color: #058;
    text-decoration: none;
    transition: color .3s ease-in-out;
  }

  a:hover {
    color: #e08524;
    transition: color .3s ease-in-out;
  }

  pre, code, .mono, .name {
    font-family: "Ubuntu Mono", "Cousine", "DejaVu Sans Mono", monospace;
  }

  .title .name {
    font-weight: bold;
  }
  .section-title {
    margin-top: 2em;
  }
  .ident {
    color: #900;
  }

  code {
    background: #f9f9f9;
  } 

  pre {
    background: #fefefe;
    border: 1px solid #ddd;
    box-shadow: 2px 2px 0 #f3f3f3;
    margin: 0 30px;
    padding: 15px 30px;
  }

  .codehilite {
    margin: 0 30px 10px 30px;
  }

    .codehilite pre {
      margin: 0;
    }
    .codehilite .err { background: #ff3300; color: #fff !important; } 

  table#module-list {
    font-size: 110%;
  }

    table#module-list tr td:first-child {
      padding-right: 10px;
      white-space: nowrap;
    }

    table#module-list td {
      vertical-align: top;
      padding-bottom: 8px;
    }

      table#module-list td p {
        margin: 0 0 7px 0;
      }

  .def {
    display: table;
  }

    .def p {
      display: table-cell;
      vertical-align: top;
      text-align: left;
    }

    .def p:first-child {
      white-space: nowrap;
    }

    .def p:last-child {
      width: 100%;
    }


  #index {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
    ul#index .class_name {
      /* font-size: 110%; */
      font-weight: bold;
    }
    #index ul {
      margin: 0;
    }

  .item {
    margin: 0 0 15px 0;
  }

    .item .class {
      margin: 0 0 25px 30px;
    }

      .item .class ul.class_list {
        margin: 0 0 20px 0;
      }

    .item .name {
      background: #fafafa;
      margin: 0;
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 3px;
      display: inline-block;
      min-width: 40%;
    }
      .item .name:hover {
        background: #f6f6f6;
      }

    .item .empty_desc {
      margin: 0 0 5px 0;
      padding: 0;
    }

    .item .inheritance {
      margin: 3px 0 0 30px;
    }

    .item .inherited {
      color: #666;
    }

    .item .desc {
      padding: 0 8px;
      margin: 0;
    }

      .item .desc p {
        margin: 0 0 10px 0;
      }

    .source_cont {
      margin: 0;
      padding: 0;
    }

    .source_link a {
      background: #ffc300;
      font-weight: 400;
      font-size: .75em;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 1px 1px 0 #f4b700;
      
      padding: 3px 8px;
      border-radius: 2px;
      transition: background .3s ease-in-out;
    }
      .source_link a:hover {
        background: #FF7200;
        text-shadow: none;
        transition: background .3s ease-in-out;
      }

    .source {
      display: none;
      max-height: 600px;
      overflow-y: scroll;
      margin-bottom: 15px;
    }

      .source .codehilite {
        margin: 0;
      }

  .desc h1, .desc h2, .desc h3 {
    font-size: 100% !important;
  }
  .clear {
    clear: both;
  }

  @media all and (max-width: 950px) {
    #sidebar {
      width: 35%;
    }
    #content {
      width: 65%;
    }
  }
  @media all and (max-width: 650px) {
    #top {
      display: none;
    }
    #sidebar {
      float: none;
      width: auto;
    }
    #content {
      float: none;
      width: auto;
      padding: 30px;
    }

    #index ul {
      padding: 0;
      margin-bottom: 15px;
    }
    #index ul li {
      display: inline-block;
      margin-right: 30px;
    }
    #footer {
      text-align: left;
    }
    #footer p {
      display: block;
      margin: inherit;
    }
  }

  /*****************************/

  </style>

  <style type="text/css">
  .codehilite .hll { background-color: #ffffcc }
.codehilite  { background: #f8f8f8; }
.codehilite .c { color: #408080; font-style: italic } /* Comment */
.codehilite .err { border: 1px solid #FF0000 } /* Error */
.codehilite .k { color: #008000; font-weight: bold } /* Keyword */
.codehilite .o { color: #666666 } /* Operator */
.codehilite .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
.codehilite .cm { color: #408080; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #BC7A00 } /* Comment.Preproc */
.codehilite .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
.codehilite .c1 { color: #408080; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #408080; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #A00000 } /* Generic.Deleted */
.codehilite .ge { font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #FF0000 } /* Generic.Error */
.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.codehilite .gi { color: #00A000 } /* Generic.Inserted */
.codehilite .go { color: #888888 } /* Generic.Output */
.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.codehilite .gs { font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.codehilite .gt { color: #0044DD } /* Generic.Traceback */
.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.codehilite .kp { color: #008000 } /* Keyword.Pseudo */
.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.codehilite .kt { color: #B00040 } /* Keyword.Type */
.codehilite .m { color: #666666 } /* Literal.Number */
.codehilite .s { color: #BA2121 } /* Literal.String */
.codehilite .na { color: #7D9029 } /* Name.Attribute */
.codehilite .nb { color: #008000 } /* Name.Builtin */
.codehilite .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.codehilite .no { color: #880000 } /* Name.Constant */
.codehilite .nd { color: #AA22FF } /* Name.Decorator */
.codehilite .ni { color: #999999; font-weight: bold } /* Name.Entity */
.codehilite .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.codehilite .nf { color: #0000FF } /* Name.Function */
.codehilite .nl { color: #A0A000 } /* Name.Label */
.codehilite .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */
.codehilite .nv { color: #19177C } /* Name.Variable */
.codehilite .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.codehilite .w { color: #bbbbbb } /* Text.Whitespace */
.codehilite .mb { color: #666666 } /* Literal.Number.Bin */
.codehilite .mf { color: #666666 } /* Literal.Number.Float */
.codehilite .mh { color: #666666 } /* Literal.Number.Hex */
.codehilite .mi { color: #666666 } /* Literal.Number.Integer */
.codehilite .mo { color: #666666 } /* Literal.Number.Oct */
.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */
.codehilite .sc { color: #BA2121 } /* Literal.String.Char */
.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */
.codehilite .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */
.codehilite .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.codehilite .sx { color: #008000 } /* Literal.String.Other */
.codehilite .sr { color: #BB6688 } /* Literal.String.Regex */
.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */
.codehilite .ss { color: #19177C } /* Literal.String.Symbol */
.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */
.codehilite .vc { color: #19177C } /* Name.Variable.Class */
.codehilite .vg { color: #19177C } /* Name.Variable.Global */
.codehilite .vi { color: #19177C } /* Name.Variable.Instance */
.codehilite .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

  <style type="text/css">
  
/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /* Style adjustments for viewports that meet the condition */
}

@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

  </style>

  <script type="text/javascript">
  function toggle(id, $link) {
    $node = document.getElementById(id);
    if (!$node)
    return;
    if (!$node.style.display || $node.style.display == 'none') {
    $node.style.display = 'block';
    $link.innerHTML = 'Hide source &nequiv;';
    } else {
    $node.style.display = 'none';
    $link.innerHTML = 'Show source &equiv;';
    }
  }
  </script>
</head>
<body>
<a href="#" id="top">Top</a>

<div id="container">
    
  
  <div id="sidebar">
    <h1>Index</h1>
    <ul id="index">


    <li class="set"><h3><a href="#header-classes">Classes</a></h3>
      <ul>
        <li class="mono">
        <span class="class_name"><a href="#feaLab.writers.markFeatureNoWriter.MarkFeatureWriter">MarkFeatureWriter</a></span>
        
          
  <ul>
    <li class="mono"><a href="#feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.__init__">__init__</a></li>
    <li class="mono"><a href="#feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.write">write</a></li>
  </ul>

        </li>
      </ul>
    </li>

    </ul>
  </div>

    <article id="content">
      
  

  


  <header id="section-intro">
  <h1 class="title"><span class="name">feaLab.writers.markFeatureNoWriter</span> module</h1>
  
  
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.markFeatureNoWriter', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.markFeatureNoWriter" class="source">
    <div class="codehilite"><pre><span></span><span class="k">class</span> <span class="nc">MarkFeatureWriter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Skips generating the mark and mkmk features.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font</span><span class="p">,</span> <span class="n">anchorList</span><span class="o">=</span><span class="p">(),</span> <span class="n">mkmkAnchorList</span><span class="o">=</span><span class="p">(),</span> <span class="n">ligaAnchorList</span><span class="o">=</span><span class="p">()):</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">doMark</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">doMkmk</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;&quot;</span>
</pre></div>

  </div>

  </header>

  <section id="section-items">


    <h2 class="section-title" id="header-classes">Classes</h2>
      
      <div class="item">
      <p id="feaLab.writers.markFeatureNoWriter.MarkFeatureWriter" class="name">class <span class="ident">MarkFeatureWriter</span></p>
      
  
    <div class="desc"><p>Skips generating the mark and mkmk features.</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.markFeatureNoWriter.MarkFeatureWriter', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.markFeatureNoWriter.MarkFeatureWriter" class="source">
    <div class="codehilite"><pre><span></span><span class="k">class</span> <span class="nc">MarkFeatureWriter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Skips generating the mark and mkmk features.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font</span><span class="p">,</span> <span class="n">anchorList</span><span class="o">=</span><span class="p">(),</span> <span class="n">mkmkAnchorList</span><span class="o">=</span><span class="p">(),</span> <span class="n">ligaAnchorList</span><span class="o">=</span><span class="p">()):</span>
        <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">doMark</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">doMkmk</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;&quot;</span>
</pre></div>

  </div>
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#feaLab.writers.markFeatureNoWriter.MarkFeatureWriter">MarkFeatureWriter</a></li>
          <li><a href="/__builtin__.object.ext">__builtin__.object</a></li>
          </ul>
          <h3>Methods</h3>
            
  <div class="item">
    <div class="name def" id="feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.__init__">
    <p>def <span class="ident">__init__</span>(</p><p>self, font, anchorList=(), mkmkAnchorList=(), ligaAnchorList=())</p>
    </div>
    

    
  
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.__init__', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.__init__" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font</span><span class="p">,</span> <span class="n">anchorList</span><span class="o">=</span><span class="p">(),</span> <span class="n">mkmkAnchorList</span><span class="o">=</span><span class="p">(),</span> <span class="n">ligaAnchorList</span><span class="o">=</span><span class="p">()):</span>
    <span class="k">pass</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.write">
    <p>def <span class="ident">write</span>(</p><p>self, doMark=False, doMkmk=False)</p>
    </div>
    

    
  
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.write', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.writers.markFeatureNoWriter.MarkFeatureWriter.write" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">doMark</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">doMkmk</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&quot;&quot;</span>
</pre></div>

  </div>
</div>

  </div>
  
      </div>
      </div>

  </section>

    </article>
  <div class="clear"> </div>
  <footer id="footer">
    <p>
      Documentation generated by
      <a href="https://github.com/BurntSushi/pdoc">pdoc 0.3.2</a>
    </p>

    <p>pdoc is in the public domain with the
      <a href="http://unlicense.org">UNLICENSE</a></p>

    <p>Design by <a href="http://nadh.in">Kailash Nadh</a></p>
  </footer>
</div>
</body>
</html>
</file>

<file path="docs/pydocs/feaLab/hb_render.m.html">
<!doctype html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

    <title>feaLab.hb_render API documentation</title>
    <meta name="description" content="hb_render.py

hb_render.HarfBuzzRenderer class 

wraps the 'hb-view' and 'hb-shape' Harfbuzz utiliti..." />

  <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300' rel='stylesheet' type='text/css'>
  
  <style type="text/css">
  
* {
  box-sizing: border-box;
}
/*! normalize.css v1.1.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/**
 * 1. Prevent system color scheme's background color being used in Firefox, IE,
 *    and Opera.
 * 2. Prevent system color scheme's text color being used in Firefox, IE, and
 *    Opera.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 4. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    background: #fff; /* 1 */
    color: #000; /* 2 */
    font-size: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 4 */
    -ms-text-size-adjust: 100%; /* 4 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */

html,
button,
input,
select,
textarea {
    font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

h2 {
    font-size: 1.5em;
    margin: 0.83em 0;
}

h3 {
    font-size: 1.17em;
    margin: 1em 0;
}

h4 {
    font-size: 1em;
    margin: 1.33em 0;
}

h5 {
    font-size: 0.83em;
    margin: 1.67em 0;
}

h6 {
    font-size: 0.67em;
    margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

blockquote {
    margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */

p,
pre {
    margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */

q {
    quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */

q:before,
q:after {
    content: '';
    content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */

/**
 * Address margins set differently in IE 6/7.
 */

dl,
menu,
ol,
ul {
    margin: 1em 0;
}

dd {
    margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */

menu,
ol,
ul {
    padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */

nav ul,
nav ol {
    list-style: none;
    list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

  </style>

  <style type="text/css">
  
  html, body {
    margin: 0;
    padding: 0;
    min-height: 100%;
  }
  body {
    background: #fff;
    font-family: "Source Sans Pro", "Helvetica Neueue", Helvetica, sans;
    font-weight: 300;
    font-size: 16px;
    line-height: 1.6em;
  }
  #content {
    width: 70%;
    max-width: 850px;
    float: left;
    padding: 30px 60px;
    border-left: 1px solid #ddd;
  }
  #sidebar {
    width: 25%;
    float: left;
    padding: 30px;
    overflow: hidden;
  }
  #nav {
    font-size: 130%;
    margin: 0 0 15px 0;
  }

  #top {
    display: block;
    position: fixed;
    bottom: 5px;
    left: 5px;
    font-size: .85em;
    text-transform: uppercase;
  }

  #footer {
    font-size: .75em;
    padding: 5px 30px;
    border-top: 1px solid #ddd;
    text-align: right;
  }
    #footer p {
      margin: 0 0 0 30px;
      display: inline-block;
    }

  h1, h2, h3, h4, h5 {
    font-weight: 300;
  }
  h1 {
    font-size: 2.5em;
    line-height: 1.1em;
    margin: 0 0 .50em 0;
  }

  h2 {
    font-size: 1.75em;
    margin: 1em 0 .50em 0;
  }

  h3 {
    margin: 25px 0 10px 0;
  }

  h4 {
    margin: 0;
    font-size: 105%;
  }

  a {
    color: #058;
    text-decoration: none;
    transition: color .3s ease-in-out;
  }

  a:hover {
    color: #e08524;
    transition: color .3s ease-in-out;
  }

  pre, code, .mono, .name {
    font-family: "Ubuntu Mono", "Cousine", "DejaVu Sans Mono", monospace;
  }

  .title .name {
    font-weight: bold;
  }
  .section-title {
    margin-top: 2em;
  }
  .ident {
    color: #900;
  }

  code {
    background: #f9f9f9;
  } 

  pre {
    background: #fefefe;
    border: 1px solid #ddd;
    box-shadow: 2px 2px 0 #f3f3f3;
    margin: 0 30px;
    padding: 15px 30px;
  }

  .codehilite {
    margin: 0 30px 10px 30px;
  }

    .codehilite pre {
      margin: 0;
    }
    .codehilite .err { background: #ff3300; color: #fff !important; } 

  table#module-list {
    font-size: 110%;
  }

    table#module-list tr td:first-child {
      padding-right: 10px;
      white-space: nowrap;
    }

    table#module-list td {
      vertical-align: top;
      padding-bottom: 8px;
    }

      table#module-list td p {
        margin: 0 0 7px 0;
      }

  .def {
    display: table;
  }

    .def p {
      display: table-cell;
      vertical-align: top;
      text-align: left;
    }

    .def p:first-child {
      white-space: nowrap;
    }

    .def p:last-child {
      width: 100%;
    }


  #index {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
    ul#index .class_name {
      /* font-size: 110%; */
      font-weight: bold;
    }
    #index ul {
      margin: 0;
    }

  .item {
    margin: 0 0 15px 0;
  }

    .item .class {
      margin: 0 0 25px 30px;
    }

      .item .class ul.class_list {
        margin: 0 0 20px 0;
      }

    .item .name {
      background: #fafafa;
      margin: 0;
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 3px;
      display: inline-block;
      min-width: 40%;
    }
      .item .name:hover {
        background: #f6f6f6;
      }

    .item .empty_desc {
      margin: 0 0 5px 0;
      padding: 0;
    }

    .item .inheritance {
      margin: 3px 0 0 30px;
    }

    .item .inherited {
      color: #666;
    }

    .item .desc {
      padding: 0 8px;
      margin: 0;
    }

      .item .desc p {
        margin: 0 0 10px 0;
      }

    .source_cont {
      margin: 0;
      padding: 0;
    }

    .source_link a {
      background: #ffc300;
      font-weight: 400;
      font-size: .75em;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 1px 1px 0 #f4b700;
      
      padding: 3px 8px;
      border-radius: 2px;
      transition: background .3s ease-in-out;
    }
      .source_link a:hover {
        background: #FF7200;
        text-shadow: none;
        transition: background .3s ease-in-out;
      }

    .source {
      display: none;
      max-height: 600px;
      overflow-y: scroll;
      margin-bottom: 15px;
    }

      .source .codehilite {
        margin: 0;
      }

  .desc h1, .desc h2, .desc h3 {
    font-size: 100% !important;
  }
  .clear {
    clear: both;
  }

  @media all and (max-width: 950px) {
    #sidebar {
      width: 35%;
    }
    #content {
      width: 65%;
    }
  }
  @media all and (max-width: 650px) {
    #top {
      display: none;
    }
    #sidebar {
      float: none;
      width: auto;
    }
    #content {
      float: none;
      width: auto;
      padding: 30px;
    }

    #index ul {
      padding: 0;
      margin-bottom: 15px;
    }
    #index ul li {
      display: inline-block;
      margin-right: 30px;
    }
    #footer {
      text-align: left;
    }
    #footer p {
      display: block;
      margin: inherit;
    }
  }

  /*****************************/

  </style>

  <style type="text/css">
  .codehilite .hll { background-color: #ffffcc }
.codehilite  { background: #f8f8f8; }
.codehilite .c { color: #408080; font-style: italic } /* Comment */
.codehilite .err { border: 1px solid #FF0000 } /* Error */
.codehilite .k { color: #008000; font-weight: bold } /* Keyword */
.codehilite .o { color: #666666 } /* Operator */
.codehilite .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
.codehilite .cm { color: #408080; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #BC7A00 } /* Comment.Preproc */
.codehilite .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
.codehilite .c1 { color: #408080; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #408080; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #A00000 } /* Generic.Deleted */
.codehilite .ge { font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #FF0000 } /* Generic.Error */
.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.codehilite .gi { color: #00A000 } /* Generic.Inserted */
.codehilite .go { color: #888888 } /* Generic.Output */
.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.codehilite .gs { font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.codehilite .gt { color: #0044DD } /* Generic.Traceback */
.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.codehilite .kp { color: #008000 } /* Keyword.Pseudo */
.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.codehilite .kt { color: #B00040 } /* Keyword.Type */
.codehilite .m { color: #666666 } /* Literal.Number */
.codehilite .s { color: #BA2121 } /* Literal.String */
.codehilite .na { color: #7D9029 } /* Name.Attribute */
.codehilite .nb { color: #008000 } /* Name.Builtin */
.codehilite .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.codehilite .no { color: #880000 } /* Name.Constant */
.codehilite .nd { color: #AA22FF } /* Name.Decorator */
.codehilite .ni { color: #999999; font-weight: bold } /* Name.Entity */
.codehilite .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.codehilite .nf { color: #0000FF } /* Name.Function */
.codehilite .nl { color: #A0A000 } /* Name.Label */
.codehilite .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */
.codehilite .nv { color: #19177C } /* Name.Variable */
.codehilite .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.codehilite .w { color: #bbbbbb } /* Text.Whitespace */
.codehilite .mb { color: #666666 } /* Literal.Number.Bin */
.codehilite .mf { color: #666666 } /* Literal.Number.Float */
.codehilite .mh { color: #666666 } /* Literal.Number.Hex */
.codehilite .mi { color: #666666 } /* Literal.Number.Integer */
.codehilite .mo { color: #666666 } /* Literal.Number.Oct */
.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */
.codehilite .sc { color: #BA2121 } /* Literal.String.Char */
.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */
.codehilite .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */
.codehilite .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.codehilite .sx { color: #008000 } /* Literal.String.Other */
.codehilite .sr { color: #BB6688 } /* Literal.String.Regex */
.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */
.codehilite .ss { color: #19177C } /* Literal.String.Symbol */
.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */
.codehilite .vc { color: #19177C } /* Name.Variable.Class */
.codehilite .vg { color: #19177C } /* Name.Variable.Global */
.codehilite .vi { color: #19177C } /* Name.Variable.Instance */
.codehilite .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

  <style type="text/css">
  
/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /* Style adjustments for viewports that meet the condition */
}

@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

  </style>

  <script type="text/javascript">
  function toggle(id, $link) {
    $node = document.getElementById(id);
    if (!$node)
    return;
    if (!$node.style.display || $node.style.display == 'none') {
    $node.style.display = 'block';
    $link.innerHTML = 'Hide source &nequiv;';
    } else {
    $node.style.display = 'none';
    $link.innerHTML = 'Show source &equiv;';
    }
  }
  </script>
</head>
<body>
<a href="#" id="top">Top</a>

<div id="container">
    
  
  <div id="sidebar">
    <h1>Index</h1>
    <ul id="index">
    <li class="set"><h3><a href="#header-variables">Module variables</a></h3>
      
  <ul>
    <li class="mono"><a href="#feaLab.hb_render.HB_VIEW">HB_VIEW</a></li>
  </ul>

    </li>

    <li class="set"><h3><a href="#header-functions">Functions</a></h3>
      
  <ul>
    <li class="mono"><a href="#feaLab.hb_render.main">main</a></li>
    <li class="mono"><a href="#feaLab.hb_render.test">test</a></li>
  </ul>

    </li>

    <li class="set"><h3><a href="#header-classes">Classes</a></h3>
      <ul>
        <li class="mono">
        <span class="class_name"><a href="#feaLab.hb_render.HarfBuzzRenderer">HarfBuzzRenderer</a></span>
        
          
  <ul>
    <li class="mono"><a href="#feaLab.hb_render.HarfBuzzRenderer.__init__">__init__</a></li>
    <li class="mono"><a href="#feaLab.hb_render.HarfBuzzRenderer.openFont">openFont</a></li>
    <li class="mono"><a href="#feaLab.hb_render.HarfBuzzRenderer.toJson">toJson</a></li>
    <li class="mono"><a href="#feaLab.hb_render.HarfBuzzRenderer.toPDF">toPDF</a></li>
    <li class="mono"><a href="#feaLab.hb_render.HarfBuzzRenderer.toPNG">toPNG</a></li>
    <li class="mono"><a href="#feaLab.hb_render.HarfBuzzRenderer.toSVG">toSVG</a></li>
    <li class="mono"><a href="#feaLab.hb_render.HarfBuzzRenderer.updateShapers">updateShapers</a></li>
  </ul>

        </li>
      </ul>
    </li>

    </ul>
  </div>

    <article id="content">
      
  

  


  <header id="section-intro">
  <h1 class="title"><span class="name">feaLab.hb_render</span> module</h1>
  <p>hb_render.py</p>
<p>hb_render.HarfBuzzRenderer class </p>
<p>wraps the 'hb-view' and 'hb-shape' Harfbuzz utilities
<em> https://github.com/behdad/harfbuzz
using the Python 'sh' module
</em> https://amoffat.github.io/sh/
* https://pypi.python.org/pypi/sh</p>
  
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render" class="source">
    <div class="codehilite"><pre><span></span><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>
<span class="sd">&quot;&quot;&quot;hb_render.py</span>

<span class="sd">hb_render.HarfBuzzRenderer class </span>

<span class="sd">wraps the &#39;hb-view&#39; and &#39;hb-shape&#39; Harfbuzz utilities</span>
<span class="sd">* https://github.com/behdad/harfbuzz</span>
<span class="sd">using the Python &#39;sh&#39; module</span>
<span class="sd">* https://amoffat.github.io/sh/</span>
<span class="sd">* https://pypi.python.org/pypi/sh</span>

<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">os.path</span>
<span class="kn">import</span> <span class="nn">warnings</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">sh</span> <span class="kn">import</span> <span class="n">hb_shape</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Run: brew install harfbuzz&quot;</span><span class="p">)</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Run: pip install --user sh&quot;</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">sh</span> <span class="kn">import</span> <span class="n">hb_view</span>

    <span class="n">HB_VIEW</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &quot;&quot;&quot;</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
    <span class="n">HB_VIEW</span> <span class="o">=</span> <span class="bp">False</span>

<span class="n">__version__</span> <span class="o">=</span> <span class="s2">&quot;0.3&quot;</span>

<span class="k">class</span> <span class="nc">HarfBuzzRenderer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Class to call the HarfBuzz `hb-view` or `hb-shape` tools via the `sh` module.</span>

<span class="sd">    Attributes:</span>
<span class="sd">        best_shaper (str):</span>
<span class="sd">            default HB shaper after hb.updateShapers(), otherwise &#39;ot&#39;</span>

<span class="sd">        all_shapers (list):</span>
<span class="sd">            all available HB shapers after hb.updateShapers()</span>

<span class="sd">        os_shaper (str):</span>
<span class="sd">            default native platform HB shaper after hb.updateShapers()</span>

<span class="sd">        use_shapers (list):</span>
<span class="sd">            list of shapers for HB to try, used to call `hb-view` or `hb-shape`</span>

<span class="sd">        output_format (str):</span>
<span class="sd">            output format for `hb-view` / hb.toImage()</span>
<span class="sd">            can be &#39;svg&#39; | &#39;png&#39; | &#39;pdf&#39; | &#39;ansi&#39; | &#39;ps&#39; | &#39;eps&#39;</span>
<span class="sd">            default: &#39;svg&#39;</span>

<span class="sd">        font_file (str):</span>
<span class="sd">            path to font file</span>

<span class="sd">        face_index (int):</span>
<span class="sd">            if font file is a TTC, the TTC sub-fontindex, otherwise 0</span>

<span class="sd">        font_size (int):</span>
<span class="sd">            the font size in pt to to use with `hb-shape` or `hb-view`</span>
<span class="sd">            default: 0 (means &#39;upem&#39;)</span>

<span class="sd">        text (unicode):</span>
<span class="sd">            input text as Unicode</span>

<span class="sd">        direction (str):</span>
<span class="sd">            text shaping direction</span>
<span class="sd">            can be: &#39;ltr&#39; | &#39;rtl&#39; | &#39;ttb&#39; | &#39;btt&#39; | &#39;auto&#39;</span>
<span class="sd">            default: &#39;auto&#39;</span>

<span class="sd">        script (str):</span>
<span class="sd">            ISO 15924 tag (not OpenType Script tag) for shaping, or &#39;auto&#39;</span>
<span class="sd">            default: &#39;auto&#39;</span>

<span class="sd">        language (str):</span>
<span class="sd">            ISO language tag (not OpenType LangSys tag) for shaping</span>
<span class="sd">            default: &#39;en&#39;</span>

<span class="sd">        features (list):</span>
<span class="sd">            Features can be enabled or disabled, either globally or limited to</span>
<span class="sd">            specific character ranges.  The format for specifying feature settings</span>
<span class="sd">            follows.  All valid CSS font-feature-settings values other than &#39;normal&#39;</span>
<span class="sd">            and &#39;inherited&#39; are also accepted, though, not documented below.</span>

<span class="sd">            The range indices refer to the positions between Unicode characters,</span>
<span class="sd">            unless the --utf8-clusters is provided, in which case range indices</span>
<span class="sd">            refer to UTF-8 byte indices. The position before the first character</span>
<span class="sd">            is always 0.</span>

<span class="sd">            The format is Python-esque.  Here is how it all works:</span>
<span class="sd">                Syntax:       Value:    Start:    End:</span>

<span class="sd">            Setting value:</span>
<span class="sd">                &quot;kern&quot;        1         0         $         # Turn feature on</span>
<span class="sd">                &quot;+kern&quot;       1         0         $         # Turn feature on</span>
<span class="sd">                &quot;-kern&quot;       0         0         $         # Turn feature off</span>
<span class="sd">                &quot;kern=0&quot;      0         0         $         # Turn feature off</span>
<span class="sd">                &quot;kern=1&quot;      1         0         $         # Turn feature on</span>
<span class="sd">                &quot;aalt=2&quot;      2         0         $         # Choose 2nd alternate</span>

<span class="sd">            Setting index:</span>
<span class="sd">                &quot;kern[]&quot;      1         0         $         # Turn feature on</span>
<span class="sd">                &quot;kern[:]&quot;     1         0         $         # Turn feature on</span>
<span class="sd">                &quot;kern[5:]&quot;    1         5         $         # Turn feature on, partial</span>
<span class="sd">                &quot;kern[:5]&quot;    1         0         5         # Turn feature on, partial</span>
<span class="sd">                &quot;kern[3:5]&quot;   1         3         5         # Turn feature on, range</span>
<span class="sd">                &quot;kern[3]&quot;     1         3         3+1       # Turn feature on, single char</span>

<span class="sd">            Mixing it all:</span>
<span class="sd">                &quot;aalt[3:5]=2&quot; 2         3         5         # Turn 2nd alternate on for range</span>

<span class="sd">            Example: hb.features=[&quot;aalt[3:5]=2&quot;,&quot;+kern&quot;,&quot;-liga&quot;]</span>

<span class="sd">        bot (bool):</span>
<span class="sd">            Treat text as beginning_of_paragraph</span>
<span class="sd">        eot (bool):</span>
<span class="sd">            Treat text as end_of_paragraph</span>
<span class="sd">        text_before (unicode):</span>
<span class="sd">            Set text context before each line</span>
<span class="sd">        text_after (unicode):</span>
<span class="sd">            Set text context after each line</span>
<span class="sd">        preserve_default_ignorables (bool):</span>
<span class="sd">            Preserve Default_Ignorable characters, default: False</span>
<span class="sd">        utf8_clusters (bool):</span>
<span class="sd">            Use UTF8 byte indices, not char indices, default: False</span>
<span class="sd">        cluster_level (int):</span>
<span class="sd">            Cluster merging level: 0 | 1 | 2, default: 0</span>
<span class="sd">        normalize_glyphs (bool):</span>
<span class="sd">            Rearrange glyph clusters in nominal order</span>
<span class="sd">        num_iterations (int):</span>
<span class="sd">            Run shaper N times (default: 1)</span>
<span class="sd">        use_glyph_indexes (bool)</span>
<span class="sd">            Output glyph indices instead of names, like --no_glyph_names in `hb-*`</span>
<span class="sd">            default: False</span>

<span class="sd">        annotate (bool)</span>
<span class="sd">            Annotate output in hb.toImage()</span>
<span class="sd">            default: False</span>
<span class="sd">        background (str)</span>
<span class="sd">            Set background color &#39;#rrggbb&#39; | &#39;#rrggbbaa&#39; in hb.toImage()</span>
<span class="sd">            default: &#39;#ffffff&#39;</span>
<span class="sd">        foreground (str)</span>
<span class="sd">            Set foreground color &#39;#rrggbb&#39; | &#39;#rrggbbaa&#39; in hb.toImage()</span>
<span class="sd">            default: &#39;#000000&#39;</span>
<span class="sd">        line_space (int)</span>
<span class="sd">            add line gap between lines in units in hb.toImage()</span>
<span class="sd">            default: 0</span>
<span class="sd">        margin (list or int)</span>
<span class="sd">            Margin around output in hb.toImage()</span>
<span class="sd">            as one number or list of one to four numbers e.g. [16, 16, 16, 16]</span>
<span class="sd">            default: 16</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font_file</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">face_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s1">u&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Initialize the HarfBuzzRenderer() object</span>

<span class="sd">        Args:</span>
<span class="sd">            font_file (str, optional): the path to the font file</span>
<span class="sd">            face_index (int, optional): the face index in a TTC file, 0 if non-TTC</span>
<span class="sd">            text (unicode, optional): Unicode text string to shape or render</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span> <span class="o">=</span> <span class="s1">&#39;ot&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span><span class="p">]</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="n">font_file</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="n">face_index</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="s1">&#39;auto&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">language</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">script</span> <span class="o">=</span> <span class="s1">&#39;auto&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">bot</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">eot</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">text_before</span> <span class="o">=</span> <span class="s1">u&#39;&#39;</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">text_after</span> <span class="o">=</span> <span class="s1">u&#39;&#39;</span>  <span class="c1">#</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># Output glyph indices instead of names</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">annotate</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># Annotate output toing</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">background</span> <span class="o">=</span> <span class="s1">&#39;#ffffff&#39;</span>  <span class="c1"># Set background color (rrggbb/rrggbbaa default: #FFFFFF)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">foreground</span> <span class="o">=</span> <span class="s1">&#39;#000000&#39;</span>  <span class="c1"># Set foreground color (rrggbb/rrggbbaa, default: #000000)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">line_space</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># Set space between lines in units (default: 0)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">margin</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>  <span class="c1"># Margin around output (one to four numbers , default: 16)</span>

    <span class="k">def</span> <span class="nf">updateShapers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Optional method to call `hb-shape`, get the list of HarfBuzz available</span>
<span class="sd">        shapers and assign them to self.all_shapers. Also populate self.best_shaper</span>
<span class="sd">        and self.os_shaper (the native platform shaper).</span>

<span class="sd">        Returns:</span>
<span class="sd">            None:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">hb_shape</span><span class="p">(</span><span class="n">list_shapers</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;win32&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="s1">&#39;directwrite&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="ow">and</span> <span class="s1">&#39;uniscribe&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;directwrite&#39;</span>
            <span class="k">elif</span> <span class="s1">&#39;uniscribe&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;uniscribe&#39;</span>
        <span class="k">elif</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;darwin&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="s1">&#39;coretext&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;coretext&#39;</span>
        <span class="k">if</span> <span class="s1">&#39;ot&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span>

    <span class="k">def</span> <span class="nf">openFont</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font_file</span><span class="p">,</span> <span class="n">face_index</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Convenience method to load a new font file</span>

<span class="sd">        Args:</span>
<span class="sd">            font_file (str):</span>
<span class="sd">            face_index (int, optional):</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">font_file</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="n">font_file</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="n">face_index</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Cannot open </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">font_file</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">_hb_shape</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Low-level method to call the `hb-shape` tool via the</span>
<span class="sd">        hb_shape virtual function provided by the `sh` module.</span>

<span class="sd">        Args:</span>
<span class="sd">            **kwargs (): passed from self.toJson()</span>
<span class="sd">                must be compatible with the `hb-shape` arguments</span>
<span class="sd">                where `--option-name=value` translates to option_name=value</span>

<span class="sd">        Returns:</span>
<span class="sd">            sh.RunningCommand:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">hb_shape</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_hb_view</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Low-level method to call the `hb-view` tool via the</span>
<span class="sd">        hb_view virtual function provided by the `sh` module.</span>

<span class="sd">        Args:</span>
<span class="sd">            **kwargs (): passed from self.toImage()</span>
<span class="sd">                must be compatible with the `hb-view` arguments</span>
<span class="sd">                where `--option-name=value` translates to option_name=value</span>

<span class="sd">        Returns:</span>
<span class="sd">            sh.RunningCommand:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">hb_view</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">toJson</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Method to call hb_shape and get back the shaped JSON</span>

<span class="sd">        Args:</span>
<span class="sd">            text (unicode, optional): optional text, otherwise uses self.text</span>

<span class="sd">        Returns:</span>
<span class="sd">            None: if an error occurred</span>
<span class="sd">            list[dict, ...]: parsed JSON structure in `hb-shape` output format</span>

<span class="sd">        Example input:</span>
<span class="sd">            hb.toJson(text=&#39;Hello&#39;))</span>

<span class="sd">        Example output:</span>
<span class="sd">            [</span>
<span class="sd">                {u&#39;g&#39;: u&#39;H&#39;, u&#39;cl&#39;: 0, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 741},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;e&#39;, u&#39;cl&#39;: 1, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 421},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;l&#39;, u&#39;cl&#39;: 2, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 258},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;l&#39;, u&#39;cl&#39;: 3, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 253},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;o&#39;, u&#39;cl&#39;: 4, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 510}</span>
<span class="sd">            ]</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="n">hb_in</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
        <span class="n">hb_out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_hb_shape</span><span class="p">(</span>
            <span class="n">_in</span><span class="o">=</span><span class="n">hb_in</span><span class="p">,</span>
            <span class="n">_encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span>
            <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;json&#39;</span><span class="p">,</span>
            <span class="n">font_file</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">font_file</span><span class="p">,</span>
            <span class="n">face_index</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">face_index</span><span class="p">,</span>
            <span class="n">font_size</span><span class="o">=</span><span class="s1">&#39;upem&#39;</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span><span class="p">,</span>
            <span class="n">show_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">show_unicode</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">show_extents</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">language</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">language</span><span class="p">,</span>
            <span class="n">direction</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span><span class="p">,</span>
            <span class="n">script</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">script</span><span class="p">,</span>
            <span class="n">features</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">features</span><span class="p">),</span>
            <span class="n">bot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">bot</span><span class="p">,</span>
            <span class="n">eot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">eot</span><span class="p">,</span>
            <span class="n">text_before</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_before</span><span class="p">,</span>
            <span class="n">text_after</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_after</span><span class="p">,</span>
            <span class="n">preserve_default_ignorables</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span><span class="p">,</span>
            <span class="n">utf8_clusters</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span><span class="p">,</span>
            <span class="n">cluster_level</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span><span class="p">,</span>
            <span class="n">normalize_glyphs</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span><span class="p">,</span>
            <span class="n">num_iterations</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span><span class="p">,</span>
            <span class="n">no_glyph_names</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span><span class="p">,</span>
            <span class="n">shapers</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span><span class="p">),</span>
        <span class="p">)</span>
        <span class="k">if</span> <span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">:</span>
            <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` returned an error: </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">))</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span>
            <span class="nb">unicode</span><span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">_toImage</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;svg&#39;</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Method to call hb_view with the desired ouput format and get back:</span>

<span class="sd">        Args:</span>
<span class="sd">            text (unicode, optional): optional text, otherwise uses self.text</span>
<span class="sd">            output_format (str): &#39;svg&#39; | &#39;png&#39; | &#39;pdf&#39; | &#39;ansi&#39; | &#39;ps&#39; | &#39;eps&#39;</span>
<span class="sd">            font_size (int): the font size to use, 0 means &#39;upem&#39;, use self.font_size if omitted</span>
<span class="sd">            output_file (unicode): path to output_file, or False if stdout should be used</span>

<span class="sd">        Returns:</span>
<span class="sd">             None: if `hb-view` is not accessible or if an error occurs</span>
<span class="sd">             str: SVG (UTF-8), PNG or PDF buffer</span>
<span class="sd">             str: the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">HB_VIEW</span><span class="p">:</span>
            <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` not available&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">font_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">font_size</span> <span class="o">=</span> <span class="s1">&#39;upem&#39;</span>
            <span class="k">elif</span> <span class="n">font_size</span><span class="p">:</span>
                <span class="n">font_size</span> <span class="o">=</span> <span class="n">font_size</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="n">font_size</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">font_size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">hb_in</span> <span class="o">=</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
            <span class="n">hb_out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_hb_view</span><span class="p">(</span>
                <span class="n">_in</span><span class="o">=</span><span class="n">hb_in</span><span class="p">,</span>
                <span class="n">_encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span>
                <span class="n">output_format</span><span class="o">=</span><span class="n">output_format</span><span class="p">,</span>
                <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span> <span class="k">if</span> <span class="n">output_file</span> <span class="k">else</span> <span class="bp">False</span><span class="p">,</span>
                <span class="n">font_file</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">font_file</span><span class="p">,</span>
                <span class="n">face_index</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">face_index</span><span class="p">,</span>
                <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span>
                <span class="n">show_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">show_unicode</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">show_extents</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">language</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">language</span><span class="p">,</span>
                <span class="n">direction</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span><span class="p">,</span>
                <span class="n">script</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">script</span><span class="p">,</span>
                <span class="n">features</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">features</span><span class="p">),</span>
                <span class="n">bot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">bot</span><span class="p">,</span>
                <span class="n">eot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">eot</span><span class="p">,</span>
                <span class="n">text_before</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_before</span><span class="p">,</span>
                <span class="n">text_after</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_after</span><span class="p">,</span>
                <span class="n">preserve_default_ignorables</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span><span class="p">,</span>
                <span class="n">utf8_clusters</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span><span class="p">,</span>
                <span class="n">cluster_level</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span><span class="p">,</span>
                <span class="n">normalize_glyphs</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span><span class="p">,</span>
                <span class="n">num_iterations</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span><span class="p">,</span>
                <span class="n">no_glyph_names</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span><span class="p">,</span>
                <span class="n">shapers</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span><span class="p">),</span>
                <span class="n">annotate</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">annotate</span><span class="p">,</span>
                <span class="n">background</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">background</span><span class="p">,</span>
                <span class="n">foreground</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">foreground</span><span class="p">,</span>
                <span class="n">line_space</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">line_space</span><span class="p">,</span>
                <span class="n">margin</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">margin</span> <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">margin</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span> <span class="k">else</span> <span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">margin</span><span class="p">),</span>
            <span class="p">)</span>
            <span class="k">if</span> <span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">:</span>
                <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` returned an error: </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">))</span>
                <span class="k">return</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">output_file</span><span class="p">:</span>
                <span class="n">output_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">realpath</span><span class="p">(</span><span class="n">output_file</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">output_path</span><span class="p">):</span>
                    <span class="k">return</span> <span class="n">output_path</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` did not create file: </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">output_path</span><span class="p">))</span>
                    <span class="k">return</span> <span class="bp">None</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">hb_out</span><span class="o">.</span><span class="n">stdout</span>

    <span class="k">def</span> <span class="nf">toSVG</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>

<span class="sd">        Args:</span>
<span class="sd">            text (str):</span>
<span class="sd">            font_size (int):</span>
<span class="sd">            output_file (str):</span>

<span class="sd">        Returns:</span>
<span class="sd">            str:</span>
<span class="sd">                * empty string if an error occurred</span>
<span class="sd">                * SVG (UTF-8) content</span>
<span class="sd">                * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;svg&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">toPNG</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>

<span class="sd">        Args:</span>
<span class="sd">            text (str):</span>
<span class="sd">            font_size (int):</span>
<span class="sd">            output_file (str):</span>

<span class="sd">        Returns:</span>
<span class="sd">            str:</span>
<span class="sd">                * empty string if an error occurred</span>
<span class="sd">                * PNG buffer</span>
<span class="sd">                * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;png&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">toPDF</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>

<span class="sd">        Args:</span>
<span class="sd">            text (str):</span>
<span class="sd">            font_size (int):</span>
<span class="sd">            output_file (str):</span>

<span class="sd">        Returns:</span>
<span class="sd">            str:</span>
<span class="sd">                * empty string if an error occurred</span>
<span class="sd">                * PDF buffer</span>
<span class="sd">                * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;pdf&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;&#39;</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="n">hb</span> <span class="o">=</span> <span class="n">HarfBuzzRenderer</span><span class="p">()</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">updateShapers</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">)</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">openFont</span><span class="p">(</span><span class="s1">&#39;test/EBGaramond12-Regular.otf&#39;</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s1">u&#39;Office staff&#39;</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toJson</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">))</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">margin</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">features</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;+dlig&#39;</span><span class="p">]</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">72</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toSVG</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toSVG</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;test/EBGaramond12-Regular.svg&#39;</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toPNG</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;test/EBGaramond12-Regular.png&#39;</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toPDF</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;test/EBGaramond12-Regular.pdf&#39;</span><span class="p">))</span>
    <span class="n">help</span><span class="p">(</span><span class="n">hb</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">hb</span> <span class="o">=</span> <span class="n">HarfBuzzRenderer</span><span class="p">()</span>
        <span class="n">hb</span><span class="o">.</span><span class="n">openFont</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">hb</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">else</span> <span class="s1">u&#39;O&#39;</span><span class="p">)</span>
        <span class="n">hb</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="k">else</span> <span class="s1">&#39;20&#39;</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toSVG</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;hb_render font_file [text] [font_size]&#39;</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>

  </div>

  </header>

  <section id="section-items">
    <h2 class="section-title" id="header-variables">Module variables</h2>
      <div class="item">
      <p id="feaLab.hb_render.HB_VIEW" class="name">var <span class="ident">HB_VIEW</span></p>
      
  
  <div class="source_cont">
</div>

      </div>

    <h2 class="section-title" id="header-functions">Functions</h2>
      
  <div class="item">
    <div class="name def" id="feaLab.hb_render.main">
    <p>def <span class="ident">main</span>(</p><p>)</p>
    </div>
    

    
  
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.main', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.main" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">hb</span> <span class="o">=</span> <span class="n">HarfBuzzRenderer</span><span class="p">()</span>
        <span class="n">hb</span><span class="o">.</span><span class="n">openFont</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">hb</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">else</span> <span class="s1">u&#39;O&#39;</span><span class="p">)</span>
        <span class="n">hb</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="k">else</span> <span class="s1">&#39;20&#39;</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toSVG</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;hb_render font_file [text] [font_size]&#39;</span><span class="p">)</span>
</pre></div>

  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="feaLab.hb_render.test">
    <p>def <span class="ident">test</span>(</p><p>)</p>
    </div>
    

    
  
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.test', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.test" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="n">hb</span> <span class="o">=</span> <span class="n">HarfBuzzRenderer</span><span class="p">()</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">updateShapers</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">)</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">openFont</span><span class="p">(</span><span class="s1">&#39;test/EBGaramond12-Regular.otf&#39;</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s1">u&#39;Office staff&#39;</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toJson</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">))</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">margin</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">hb</span><span class="o">.</span><span class="n">features</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;+dlig&#39;</span><span class="p">]</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">72</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toSVG</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toSVG</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;test/EBGaramond12-Regular.svg&#39;</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toPNG</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;test/EBGaramond12-Regular.png&#39;</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">hb</span><span class="o">.</span><span class="n">toPDF</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;test/EBGaramond12-Regular.pdf&#39;</span><span class="p">))</span>
    <span class="n">help</span><span class="p">(</span><span class="n">hb</span><span class="p">)</span>
</pre></div>

  </div>
</div>

  </div>
  

    <h2 class="section-title" id="header-classes">Classes</h2>
      
      <div class="item">
      <p id="feaLab.hb_render.HarfBuzzRenderer" class="name">class <span class="ident">HarfBuzzRenderer</span></p>
      
  
    <div class="desc"><p>Class to call the HarfBuzz <code>hb-view</code> or <code>hb-shape</code> tools via the <code>sh</code> module.</p>
<p>Attributes:
    best_shaper (str):
        default HB shaper after hb.updateShapers(), otherwise 'ot'</p>
<div class="codehilite"><pre><span></span>all_shapers (list):
    all available HB shapers after hb.updateShapers()

os_shaper (str):
    default native platform HB shaper after hb.updateShapers()

use_shapers (list):
    list of shapers for HB to try, used to call `hb-view` or `hb-shape`

output_format (str):
    output format for `hb-view` / hb.toImage()
    can be &#39;svg&#39; | &#39;png&#39; | &#39;pdf&#39; | &#39;ansi&#39; | &#39;ps&#39; | &#39;eps&#39;
    default: &#39;svg&#39;

font_file (str):
    path to font file

face_index (int):
    if font file is a TTC, the TTC sub-fontindex, otherwise 0

font_size (int):
    the font size in pt to to use with `hb-shape` or `hb-view`
    default: 0 (means &#39;upem&#39;)

text (unicode):
    input text as Unicode

direction (str):
    text shaping direction
    can be: &#39;ltr&#39; | &#39;rtl&#39; | &#39;ttb&#39; | &#39;btt&#39; | &#39;auto&#39;
    default: &#39;auto&#39;

script (str):
    ISO 15924 tag (not OpenType Script tag) for shaping, or &#39;auto&#39;
    default: &#39;auto&#39;

language (str):
    ISO language tag (not OpenType LangSys tag) for shaping
    default: &#39;en&#39;

features (list):
    Features can be enabled or disabled, either globally or limited to
    specific character ranges.  The format for specifying feature settings
    follows.  All valid CSS font-feature-settings values other than &#39;normal&#39;
    and &#39;inherited&#39; are also accepted, though, not documented below.

    The range indices refer to the positions between Unicode characters,
    unless the --utf8-clusters is provided, in which case range indices
    refer to UTF-8 byte indices. The position before the first character
    is always 0.

    The format is Python-esque.  Here is how it all works:
        Syntax:       Value:    Start:    End:

    Setting value:
        &quot;kern&quot;        1         0         $         # Turn feature on
        &quot;+kern&quot;       1         0         $         # Turn feature on
        &quot;-kern&quot;       0         0         $         # Turn feature off
        &quot;kern=0&quot;      0         0         $         # Turn feature off
        &quot;kern=1&quot;      1         0         $         # Turn feature on
        &quot;aalt=2&quot;      2         0         $         # Choose 2nd alternate

    Setting index:
        &quot;kern[]&quot;      1         0         $         # Turn feature on
        &quot;kern[:]&quot;     1         0         $         # Turn feature on
        &quot;kern[5:]&quot;    1         5         $         # Turn feature on, partial
        &quot;kern[:5]&quot;    1         0         5         # Turn feature on, partial
        &quot;kern[3:5]&quot;   1         3         5         # Turn feature on, range
        &quot;kern[3]&quot;     1         3         3+1       # Turn feature on, single char

    Mixing it all:
        &quot;aalt[3:5]=2&quot; 2         3         5         # Turn 2nd alternate on for range

    Example: hb.features=[&quot;aalt[3:5]=2&quot;,&quot;+kern&quot;,&quot;-liga&quot;]

bot (bool):
    Treat text as beginning_of_paragraph
eot (bool):
    Treat text as end_of_paragraph
text_before (unicode):
    Set text context before each line
text_after (unicode):
    Set text context after each line
preserve_default_ignorables (bool):
    Preserve Default_Ignorable characters, default: False
utf8_clusters (bool):
    Use UTF8 byte indices, not char indices, default: False
cluster_level (int):
    Cluster merging level: 0 | 1 | 2, default: 0
normalize_glyphs (bool):
    Rearrange glyph clusters in nominal order
num_iterations (int):
    Run shaper N times (default: 1)
use_glyph_indexes (bool)
    Output glyph indices instead of names, like --no_glyph_names in `hb-*`
    default: False

annotate (bool)
    Annotate output in hb.toImage()
    default: False
background (str)
    Set background color &#39;#rrggbb&#39; | &#39;#rrggbbaa&#39; in hb.toImage()
    default: &#39;#ffffff&#39;
foreground (str)
    Set foreground color &#39;#rrggbb&#39; | &#39;#rrggbbaa&#39; in hb.toImage()
    default: &#39;#000000&#39;
line_space (int)
    add line gap between lines in units in hb.toImage()
    default: 0
margin (list or int)
    Margin around output in hb.toImage()
    as one number or list of one to four numbers e.g. [16, 16, 16, 16]
    default: 16
</pre></div></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer" class="source">
    <div class="codehilite"><pre><span></span><span class="k">class</span> <span class="nc">HarfBuzzRenderer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Class to call the HarfBuzz `hb-view` or `hb-shape` tools via the `sh` module.</span>

<span class="sd">    Attributes:</span>
<span class="sd">        best_shaper (str):</span>
<span class="sd">            default HB shaper after hb.updateShapers(), otherwise &#39;ot&#39;</span>

<span class="sd">        all_shapers (list):</span>
<span class="sd">            all available HB shapers after hb.updateShapers()</span>

<span class="sd">        os_shaper (str):</span>
<span class="sd">            default native platform HB shaper after hb.updateShapers()</span>

<span class="sd">        use_shapers (list):</span>
<span class="sd">            list of shapers for HB to try, used to call `hb-view` or `hb-shape`</span>

<span class="sd">        output_format (str):</span>
<span class="sd">            output format for `hb-view` / hb.toImage()</span>
<span class="sd">            can be &#39;svg&#39; | &#39;png&#39; | &#39;pdf&#39; | &#39;ansi&#39; | &#39;ps&#39; | &#39;eps&#39;</span>
<span class="sd">            default: &#39;svg&#39;</span>

<span class="sd">        font_file (str):</span>
<span class="sd">            path to font file</span>

<span class="sd">        face_index (int):</span>
<span class="sd">            if font file is a TTC, the TTC sub-fontindex, otherwise 0</span>

<span class="sd">        font_size (int):</span>
<span class="sd">            the font size in pt to to use with `hb-shape` or `hb-view`</span>
<span class="sd">            default: 0 (means &#39;upem&#39;)</span>

<span class="sd">        text (unicode):</span>
<span class="sd">            input text as Unicode</span>

<span class="sd">        direction (str):</span>
<span class="sd">            text shaping direction</span>
<span class="sd">            can be: &#39;ltr&#39; | &#39;rtl&#39; | &#39;ttb&#39; | &#39;btt&#39; | &#39;auto&#39;</span>
<span class="sd">            default: &#39;auto&#39;</span>

<span class="sd">        script (str):</span>
<span class="sd">            ISO 15924 tag (not OpenType Script tag) for shaping, or &#39;auto&#39;</span>
<span class="sd">            default: &#39;auto&#39;</span>

<span class="sd">        language (str):</span>
<span class="sd">            ISO language tag (not OpenType LangSys tag) for shaping</span>
<span class="sd">            default: &#39;en&#39;</span>

<span class="sd">        features (list):</span>
<span class="sd">            Features can be enabled or disabled, either globally or limited to</span>
<span class="sd">            specific character ranges.  The format for specifying feature settings</span>
<span class="sd">            follows.  All valid CSS font-feature-settings values other than &#39;normal&#39;</span>
<span class="sd">            and &#39;inherited&#39; are also accepted, though, not documented below.</span>

<span class="sd">            The range indices refer to the positions between Unicode characters,</span>
<span class="sd">            unless the --utf8-clusters is provided, in which case range indices</span>
<span class="sd">            refer to UTF-8 byte indices. The position before the first character</span>
<span class="sd">            is always 0.</span>

<span class="sd">            The format is Python-esque.  Here is how it all works:</span>
<span class="sd">                Syntax:       Value:    Start:    End:</span>

<span class="sd">            Setting value:</span>
<span class="sd">                &quot;kern&quot;        1         0         $         # Turn feature on</span>
<span class="sd">                &quot;+kern&quot;       1         0         $         # Turn feature on</span>
<span class="sd">                &quot;-kern&quot;       0         0         $         # Turn feature off</span>
<span class="sd">                &quot;kern=0&quot;      0         0         $         # Turn feature off</span>
<span class="sd">                &quot;kern=1&quot;      1         0         $         # Turn feature on</span>
<span class="sd">                &quot;aalt=2&quot;      2         0         $         # Choose 2nd alternate</span>

<span class="sd">            Setting index:</span>
<span class="sd">                &quot;kern[]&quot;      1         0         $         # Turn feature on</span>
<span class="sd">                &quot;kern[:]&quot;     1         0         $         # Turn feature on</span>
<span class="sd">                &quot;kern[5:]&quot;    1         5         $         # Turn feature on, partial</span>
<span class="sd">                &quot;kern[:5]&quot;    1         0         5         # Turn feature on, partial</span>
<span class="sd">                &quot;kern[3:5]&quot;   1         3         5         # Turn feature on, range</span>
<span class="sd">                &quot;kern[3]&quot;     1         3         3+1       # Turn feature on, single char</span>

<span class="sd">            Mixing it all:</span>
<span class="sd">                &quot;aalt[3:5]=2&quot; 2         3         5         # Turn 2nd alternate on for range</span>

<span class="sd">            Example: hb.features=[&quot;aalt[3:5]=2&quot;,&quot;+kern&quot;,&quot;-liga&quot;]</span>

<span class="sd">        bot (bool):</span>
<span class="sd">            Treat text as beginning_of_paragraph</span>
<span class="sd">        eot (bool):</span>
<span class="sd">            Treat text as end_of_paragraph</span>
<span class="sd">        text_before (unicode):</span>
<span class="sd">            Set text context before each line</span>
<span class="sd">        text_after (unicode):</span>
<span class="sd">            Set text context after each line</span>
<span class="sd">        preserve_default_ignorables (bool):</span>
<span class="sd">            Preserve Default_Ignorable characters, default: False</span>
<span class="sd">        utf8_clusters (bool):</span>
<span class="sd">            Use UTF8 byte indices, not char indices, default: False</span>
<span class="sd">        cluster_level (int):</span>
<span class="sd">            Cluster merging level: 0 | 1 | 2, default: 0</span>
<span class="sd">        normalize_glyphs (bool):</span>
<span class="sd">            Rearrange glyph clusters in nominal order</span>
<span class="sd">        num_iterations (int):</span>
<span class="sd">            Run shaper N times (default: 1)</span>
<span class="sd">        use_glyph_indexes (bool)</span>
<span class="sd">            Output glyph indices instead of names, like --no_glyph_names in `hb-*`</span>
<span class="sd">            default: False</span>

<span class="sd">        annotate (bool)</span>
<span class="sd">            Annotate output in hb.toImage()</span>
<span class="sd">            default: False</span>
<span class="sd">        background (str)</span>
<span class="sd">            Set background color &#39;#rrggbb&#39; | &#39;#rrggbbaa&#39; in hb.toImage()</span>
<span class="sd">            default: &#39;#ffffff&#39;</span>
<span class="sd">        foreground (str)</span>
<span class="sd">            Set foreground color &#39;#rrggbb&#39; | &#39;#rrggbbaa&#39; in hb.toImage()</span>
<span class="sd">            default: &#39;#000000&#39;</span>
<span class="sd">        line_space (int)</span>
<span class="sd">            add line gap between lines in units in hb.toImage()</span>
<span class="sd">            default: 0</span>
<span class="sd">        margin (list or int)</span>
<span class="sd">            Margin around output in hb.toImage()</span>
<span class="sd">            as one number or list of one to four numbers e.g. [16, 16, 16, 16]</span>
<span class="sd">            default: 16</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font_file</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">face_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s1">u&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Initialize the HarfBuzzRenderer() object</span>

<span class="sd">        Args:</span>
<span class="sd">            font_file (str, optional): the path to the font file</span>
<span class="sd">            face_index (int, optional): the face index in a TTC file, 0 if non-TTC</span>
<span class="sd">            text (unicode, optional): Unicode text string to shape or render</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span> <span class="o">=</span> <span class="s1">&#39;ot&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span><span class="p">]</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="n">font_file</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="n">face_index</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="s1">&#39;auto&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">language</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">script</span> <span class="o">=</span> <span class="s1">&#39;auto&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">bot</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">eot</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">text_before</span> <span class="o">=</span> <span class="s1">u&#39;&#39;</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">text_after</span> <span class="o">=</span> <span class="s1">u&#39;&#39;</span>  <span class="c1">#</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">#</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># Output glyph indices instead of names</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">annotate</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># Annotate output toing</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">background</span> <span class="o">=</span> <span class="s1">&#39;#ffffff&#39;</span>  <span class="c1"># Set background color (rrggbb/rrggbbaa default: #FFFFFF)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">foreground</span> <span class="o">=</span> <span class="s1">&#39;#000000&#39;</span>  <span class="c1"># Set foreground color (rrggbb/rrggbbaa, default: #000000)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">line_space</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># Set space between lines in units (default: 0)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">margin</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>  <span class="c1"># Margin around output (one to four numbers , default: 16)</span>

    <span class="k">def</span> <span class="nf">updateShapers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Optional method to call `hb-shape`, get the list of HarfBuzz available</span>
<span class="sd">        shapers and assign them to self.all_shapers. Also populate self.best_shaper</span>
<span class="sd">        and self.os_shaper (the native platform shaper).</span>

<span class="sd">        Returns:</span>
<span class="sd">            None:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">hb_shape</span><span class="p">(</span><span class="n">list_shapers</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;win32&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="s1">&#39;directwrite&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="ow">and</span> <span class="s1">&#39;uniscribe&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;directwrite&#39;</span>
            <span class="k">elif</span> <span class="s1">&#39;uniscribe&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;uniscribe&#39;</span>
        <span class="k">elif</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;darwin&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="s1">&#39;coretext&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;coretext&#39;</span>
        <span class="k">if</span> <span class="s1">&#39;ot&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span>

    <span class="k">def</span> <span class="nf">openFont</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font_file</span><span class="p">,</span> <span class="n">face_index</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Convenience method to load a new font file</span>

<span class="sd">        Args:</span>
<span class="sd">            font_file (str):</span>
<span class="sd">            face_index (int, optional):</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">font_file</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="n">font_file</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="n">face_index</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Cannot open </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">font_file</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">_hb_shape</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Low-level method to call the `hb-shape` tool via the</span>
<span class="sd">        hb_shape virtual function provided by the `sh` module.</span>

<span class="sd">        Args:</span>
<span class="sd">            **kwargs (): passed from self.toJson()</span>
<span class="sd">                must be compatible with the `hb-shape` arguments</span>
<span class="sd">                where `--option-name=value` translates to option_name=value</span>

<span class="sd">        Returns:</span>
<span class="sd">            sh.RunningCommand:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">hb_shape</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_hb_view</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Low-level method to call the `hb-view` tool via the</span>
<span class="sd">        hb_view virtual function provided by the `sh` module.</span>

<span class="sd">        Args:</span>
<span class="sd">            **kwargs (): passed from self.toImage()</span>
<span class="sd">                must be compatible with the `hb-view` arguments</span>
<span class="sd">                where `--option-name=value` translates to option_name=value</span>

<span class="sd">        Returns:</span>
<span class="sd">            sh.RunningCommand:</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">hb_view</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">toJson</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Method to call hb_shape and get back the shaped JSON</span>

<span class="sd">        Args:</span>
<span class="sd">            text (unicode, optional): optional text, otherwise uses self.text</span>

<span class="sd">        Returns:</span>
<span class="sd">            None: if an error occurred</span>
<span class="sd">            list[dict, ...]: parsed JSON structure in `hb-shape` output format</span>

<span class="sd">        Example input:</span>
<span class="sd">            hb.toJson(text=&#39;Hello&#39;))</span>

<span class="sd">        Example output:</span>
<span class="sd">            [</span>
<span class="sd">                {u&#39;g&#39;: u&#39;H&#39;, u&#39;cl&#39;: 0, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 741},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;e&#39;, u&#39;cl&#39;: 1, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 421},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;l&#39;, u&#39;cl&#39;: 2, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 258},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;l&#39;, u&#39;cl&#39;: 3, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 253},</span>
<span class="sd">                {u&#39;g&#39;: u&#39;o&#39;, u&#39;cl&#39;: 4, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 510}</span>
<span class="sd">            ]</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="n">hb_in</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
        <span class="n">hb_out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_hb_shape</span><span class="p">(</span>
            <span class="n">_in</span><span class="o">=</span><span class="n">hb_in</span><span class="p">,</span>
            <span class="n">_encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span>
            <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;json&#39;</span><span class="p">,</span>
            <span class="n">font_file</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">font_file</span><span class="p">,</span>
            <span class="n">face_index</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">face_index</span><span class="p">,</span>
            <span class="n">font_size</span><span class="o">=</span><span class="s1">&#39;upem&#39;</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span><span class="p">,</span>
            <span class="n">show_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">show_unicode</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">show_extents</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">language</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">language</span><span class="p">,</span>
            <span class="n">direction</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span><span class="p">,</span>
            <span class="n">script</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">script</span><span class="p">,</span>
            <span class="n">features</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">features</span><span class="p">),</span>
            <span class="n">bot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">bot</span><span class="p">,</span>
            <span class="n">eot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">eot</span><span class="p">,</span>
            <span class="n">text_before</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_before</span><span class="p">,</span>
            <span class="n">text_after</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_after</span><span class="p">,</span>
            <span class="n">preserve_default_ignorables</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span><span class="p">,</span>
            <span class="n">utf8_clusters</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span><span class="p">,</span>
            <span class="n">cluster_level</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span><span class="p">,</span>
            <span class="n">normalize_glyphs</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span><span class="p">,</span>
            <span class="n">num_iterations</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span><span class="p">,</span>
            <span class="n">no_glyph_names</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span><span class="p">,</span>
            <span class="n">shapers</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span><span class="p">),</span>
        <span class="p">)</span>
        <span class="k">if</span> <span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">:</span>
            <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` returned an error: </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">))</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span>
            <span class="nb">unicode</span><span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">_toImage</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;svg&#39;</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Method to call hb_view with the desired ouput format and get back:</span>

<span class="sd">        Args:</span>
<span class="sd">            text (unicode, optional): optional text, otherwise uses self.text</span>
<span class="sd">            output_format (str): &#39;svg&#39; | &#39;png&#39; | &#39;pdf&#39; | &#39;ansi&#39; | &#39;ps&#39; | &#39;eps&#39;</span>
<span class="sd">            font_size (int): the font size to use, 0 means &#39;upem&#39;, use self.font_size if omitted</span>
<span class="sd">            output_file (unicode): path to output_file, or False if stdout should be used</span>

<span class="sd">        Returns:</span>
<span class="sd">             None: if `hb-view` is not accessible or if an error occurs</span>
<span class="sd">             str: SVG (UTF-8), PNG or PDF buffer</span>
<span class="sd">             str: the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">HB_VIEW</span><span class="p">:</span>
            <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` not available&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">font_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">font_size</span> <span class="o">=</span> <span class="s1">&#39;upem&#39;</span>
            <span class="k">elif</span> <span class="n">font_size</span><span class="p">:</span>
                <span class="n">font_size</span> <span class="o">=</span> <span class="n">font_size</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="n">font_size</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">font_size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">hb_in</span> <span class="o">=</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
            <span class="n">hb_out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_hb_view</span><span class="p">(</span>
                <span class="n">_in</span><span class="o">=</span><span class="n">hb_in</span><span class="p">,</span>
                <span class="n">_encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span>
                <span class="n">output_format</span><span class="o">=</span><span class="n">output_format</span><span class="p">,</span>
                <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span> <span class="k">if</span> <span class="n">output_file</span> <span class="k">else</span> <span class="bp">False</span><span class="p">,</span>
                <span class="n">font_file</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">font_file</span><span class="p">,</span>
                <span class="n">face_index</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">face_index</span><span class="p">,</span>
                <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span>
                <span class="n">show_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">show_unicode</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">show_extents</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">language</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">language</span><span class="p">,</span>
                <span class="n">direction</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span><span class="p">,</span>
                <span class="n">script</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">script</span><span class="p">,</span>
                <span class="n">features</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">features</span><span class="p">),</span>
                <span class="n">bot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">bot</span><span class="p">,</span>
                <span class="n">eot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">eot</span><span class="p">,</span>
                <span class="n">text_before</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_before</span><span class="p">,</span>
                <span class="n">text_after</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_after</span><span class="p">,</span>
                <span class="n">preserve_default_ignorables</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span><span class="p">,</span>
                <span class="n">utf8_clusters</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span><span class="p">,</span>
                <span class="n">cluster_level</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span><span class="p">,</span>
                <span class="n">normalize_glyphs</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span><span class="p">,</span>
                <span class="n">num_iterations</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span><span class="p">,</span>
                <span class="n">no_glyph_names</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span><span class="p">,</span>
                <span class="n">shapers</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span><span class="p">),</span>
                <span class="n">annotate</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">annotate</span><span class="p">,</span>
                <span class="n">background</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">background</span><span class="p">,</span>
                <span class="n">foreground</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">foreground</span><span class="p">,</span>
                <span class="n">line_space</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">line_space</span><span class="p">,</span>
                <span class="n">margin</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">margin</span> <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">margin</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span> <span class="k">else</span> <span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">margin</span><span class="p">),</span>
            <span class="p">)</span>
            <span class="k">if</span> <span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">:</span>
                <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` returned an error: </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">))</span>
                <span class="k">return</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">output_file</span><span class="p">:</span>
                <span class="n">output_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">realpath</span><span class="p">(</span><span class="n">output_file</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">output_path</span><span class="p">):</span>
                    <span class="k">return</span> <span class="n">output_path</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` did not create file: </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">output_path</span><span class="p">))</span>
                    <span class="k">return</span> <span class="bp">None</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">hb_out</span><span class="o">.</span><span class="n">stdout</span>

    <span class="k">def</span> <span class="nf">toSVG</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>

<span class="sd">        Args:</span>
<span class="sd">            text (str):</span>
<span class="sd">            font_size (int):</span>
<span class="sd">            output_file (str):</span>

<span class="sd">        Returns:</span>
<span class="sd">            str:</span>
<span class="sd">                * empty string if an error occurred</span>
<span class="sd">                * SVG (UTF-8) content</span>
<span class="sd">                * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;svg&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">toPNG</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>

<span class="sd">        Args:</span>
<span class="sd">            text (str):</span>
<span class="sd">            font_size (int):</span>
<span class="sd">            output_file (str):</span>

<span class="sd">        Returns:</span>
<span class="sd">            str:</span>
<span class="sd">                * empty string if an error occurred</span>
<span class="sd">                * PNG buffer</span>
<span class="sd">                * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;png&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">toPDF</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>

<span class="sd">        Args:</span>
<span class="sd">            text (str):</span>
<span class="sd">            font_size (int):</span>
<span class="sd">            output_file (str):</span>

<span class="sd">        Returns:</span>
<span class="sd">            str:</span>
<span class="sd">                * empty string if an error occurred</span>
<span class="sd">                * PDF buffer</span>
<span class="sd">                * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;pdf&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</pre></div>

  </div>
</div>


      <div class="class">
          <h3>Ancestors (in MRO)</h3>
          <ul class="class_list">
          <li><a href="#feaLab.hb_render.HarfBuzzRenderer">HarfBuzzRenderer</a></li>
          <li><a href="/__builtin__.object.ext">__builtin__.object</a></li>
          </ul>
          <h3>Instance variables</h3>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.all_shapers" class="name">var <span class="ident">all_shapers</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.annotate" class="name">var <span class="ident">annotate</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.background" class="name">var <span class="ident">background</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.best_shaper" class="name">var <span class="ident">best_shaper</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.bot" class="name">var <span class="ident">bot</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.cluster_level" class="name">var <span class="ident">cluster_level</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.direction" class="name">var <span class="ident">direction</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.eot" class="name">var <span class="ident">eot</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.face_index" class="name">var <span class="ident">face_index</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.features" class="name">var <span class="ident">features</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.font_file" class="name">var <span class="ident">font_file</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.font_size" class="name">var <span class="ident">font_size</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.foreground" class="name">var <span class="ident">foreground</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.language" class="name">var <span class="ident">language</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.line_space" class="name">var <span class="ident">line_space</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.margin" class="name">var <span class="ident">margin</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.normalize_glyphs" class="name">var <span class="ident">normalize_glyphs</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.num_iterations" class="name">var <span class="ident">num_iterations</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.os_shaper" class="name">var <span class="ident">os_shaper</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.preserve_default_ignorables" class="name">var <span class="ident">preserve_default_ignorables</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.script" class="name">var <span class="ident">script</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.text" class="name">var <span class="ident">text</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.text_after" class="name">var <span class="ident">text_after</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.text_before" class="name">var <span class="ident">text_before</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.use_glyph_indexes" class="name">var <span class="ident">use_glyph_indexes</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.use_shapers" class="name">var <span class="ident">use_shapers</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
            <div class="item">
            <p id="feaLab.hb_render.HarfBuzzRenderer.utf8_clusters" class="name">var <span class="ident">utf8_clusters</span></p>
            

            
  
  <div class="source_cont">
</div>

            </div>
          <h3>Methods</h3>
            
  <div class="item">
    <div class="name def" id="feaLab.hb_render.HarfBuzzRenderer.__init__">
    <p>def <span class="ident">__init__</span>(</p><p>self, font_file=None, face_index=0, text=u&#39;&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Initialize the HarfBuzzRenderer() object</p>
<p>Args:
    font_file (str, optional): the path to the font file
    face_index (int, optional): the face index in a TTC file, 0 if non-TTC
    text (unicode, optional): Unicode text string to shape or render</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer.__init__', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer.__init__" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font_file</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">face_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s1">u&#39;&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Initialize the HarfBuzzRenderer() object</span>
<span class="sd">    Args:</span>
<span class="sd">        font_file (str, optional): the path to the font file</span>
<span class="sd">        face_index (int, optional): the face index in a TTC file, 0 if non-TTC</span>
<span class="sd">        text (unicode, optional): Unicode text string to shape or render</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span> <span class="o">=</span> <span class="s1">&#39;ot&#39;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span><span class="p">]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span><span class="p">]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="n">font_file</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="n">face_index</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="s1">&#39;auto&#39;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">language</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">script</span> <span class="o">=</span> <span class="s1">&#39;auto&#39;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">bot</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">eot</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">text_before</span> <span class="o">=</span> <span class="s1">u&#39;&#39;</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">text_after</span> <span class="o">=</span> <span class="s1">u&#39;&#39;</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">#</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># Output glyph indices instead of names</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">annotate</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># Annotate output toing</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">background</span> <span class="o">=</span> <span class="s1">&#39;#ffffff&#39;</span>  <span class="c1"># Set background color (rrggbb/rrggbbaa default: #FFFFFF)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">foreground</span> <span class="o">=</span> <span class="s1">&#39;#000000&#39;</span>  <span class="c1"># Set foreground color (rrggbb/rrggbbaa, default: #000000)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">line_space</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># Set space between lines in units (default: 0)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">margin</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>  <span class="c1"># Margin around output (one to four numbers , default: 16)</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.hb_render.HarfBuzzRenderer.openFont">
    <p>def <span class="ident">openFont</span>(</p><p>self, font_file, face_index=0)</p>
    </div>
    

    
  
    <div class="desc"><p>Convenience method to load a new font file</p>
<p>Args:
    font_file (str):
    face_index (int, optional):</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer.openFont', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer.openFont" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">openFont</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">font_file</span><span class="p">,</span> <span class="n">face_index</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Convenience method to load a new font file</span>
<span class="sd">    Args:</span>
<span class="sd">        font_file (str):</span>
<span class="sd">        face_index (int, optional):</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">font_file</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="n">font_file</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="n">face_index</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Cannot open </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">font_file</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">font_file</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">face_index</span> <span class="o">=</span> <span class="mi">0</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.hb_render.HarfBuzzRenderer.toJson">
    <p>def <span class="ident">toJson</span>(</p><p>self, text=None)</p>
    </div>
    

    
  
    <div class="desc"><p>Method to call hb_shape and get back the shaped JSON</p>
<p>Args:
    text (unicode, optional): optional text, otherwise uses self.text</p>
<p>Returns:
    None: if an error occurred
    list[dict, ...]: parsed JSON structure in <code>hb-shape</code> output format</p>
<p>Example input:
    hb.toJson(text='Hello'))</p>
<p>Example output:
    [
        {u'g': u'H', u'cl': 0, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 741},
        {u'g': u'e', u'cl': 1, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 421},
        {u'g': u'l', u'cl': 2, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 258},
        {u'g': u'l', u'cl': 3, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 253},
        {u'g': u'o', u'cl': 4, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 510}
    ]</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer.toJson', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer.toJson" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">toJson</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Method to call hb_shape and get back the shaped JSON</span>
<span class="sd">    Args:</span>
<span class="sd">        text (unicode, optional): optional text, otherwise uses self.text</span>
<span class="sd">    Returns:</span>
<span class="sd">        None: if an error occurred</span>
<span class="sd">        list[dict, ...]: parsed JSON structure in `hb-shape` output format</span>
<span class="sd">    Example input:</span>
<span class="sd">        hb.toJson(text=&#39;Hello&#39;))</span>
<span class="sd">    Example output:</span>
<span class="sd">        [</span>
<span class="sd">            {u&#39;g&#39;: u&#39;H&#39;, u&#39;cl&#39;: 0, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 741},</span>
<span class="sd">            {u&#39;g&#39;: u&#39;e&#39;, u&#39;cl&#39;: 1, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 421},</span>
<span class="sd">            {u&#39;g&#39;: u&#39;l&#39;, u&#39;cl&#39;: 2, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 258},</span>
<span class="sd">            {u&#39;g&#39;: u&#39;l&#39;, u&#39;cl&#39;: 3, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 253},</span>
<span class="sd">            {u&#39;g&#39;: u&#39;o&#39;, u&#39;cl&#39;: 4, u&#39;dx&#39;: 0, u&#39;dy&#39;: 0, u&#39;ay&#39;: 0, u&#39;ax&#39;: 510}</span>
<span class="sd">        ]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
    <span class="n">hb_in</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
    <span class="n">hb_out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_hb_shape</span><span class="p">(</span>
        <span class="n">_in</span><span class="o">=</span><span class="n">hb_in</span><span class="p">,</span>
        <span class="n">_encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span>
        <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;json&#39;</span><span class="p">,</span>
        <span class="n">font_file</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">font_file</span><span class="p">,</span>
        <span class="n">face_index</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">face_index</span><span class="p">,</span>
        <span class="n">font_size</span><span class="o">=</span><span class="s1">&#39;upem&#39;</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">self</span><span class="o">.</span><span class="n">font_size</span><span class="p">,</span>
        <span class="n">show_text</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">show_unicode</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">show_extents</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">language</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">language</span><span class="p">,</span>
        <span class="n">direction</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span><span class="p">,</span>
        <span class="n">script</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">script</span><span class="p">,</span>
        <span class="n">features</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">features</span><span class="p">),</span>
        <span class="n">bot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">bot</span><span class="p">,</span>
        <span class="n">eot</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">eot</span><span class="p">,</span>
        <span class="n">text_before</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_before</span><span class="p">,</span>
        <span class="n">text_after</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">text_after</span><span class="p">,</span>
        <span class="n">preserve_default_ignorables</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">preserve_default_ignorables</span><span class="p">,</span>
        <span class="n">utf8_clusters</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">utf8_clusters</span><span class="p">,</span>
        <span class="n">cluster_level</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cluster_level</span><span class="p">,</span>
        <span class="n">normalize_glyphs</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">normalize_glyphs</span><span class="p">,</span>
        <span class="n">num_iterations</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_iterations</span><span class="p">,</span>
        <span class="n">no_glyph_names</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">use_glyph_indexes</span><span class="p">,</span>
        <span class="n">shapers</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">use_shapers</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="k">if</span> <span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">:</span>
        <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;`hb-view` returned an error: </span><span class="si">%s</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stderr</span><span class="p">))</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span>
        <span class="nb">unicode</span><span class="p">(</span><span class="n">hb_out</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
    <span class="p">)</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.hb_render.HarfBuzzRenderer.toPDF">
    <p>def <span class="ident">toPDF</span>(</p><p>self, text=None, font_size=None, output_file=&#39;&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Args:
    text (str):
    font_size (int):
    output_file (str):</p>
<p>Returns:
    str:
        * empty string if an error occurred
        * PDF buffer
        * the output file path (UTF-8) if output_file was provided and the file was created</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer.toPDF', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer.toPDF" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">toPDF</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Args:</span>
<span class="sd">        text (str):</span>
<span class="sd">        font_size (int):</span>
<span class="sd">        output_file (str):</span>
<span class="sd">    Returns:</span>
<span class="sd">        str:</span>
<span class="sd">            * empty string if an error occurred</span>
<span class="sd">            * PDF buffer</span>
<span class="sd">            * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;pdf&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">data</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.hb_render.HarfBuzzRenderer.toPNG">
    <p>def <span class="ident">toPNG</span>(</p><p>self, text=None, font_size=None, output_file=&#39;&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Args:
    text (str):
    font_size (int):
    output_file (str):</p>
<p>Returns:
    str:
        * empty string if an error occurred
        * PNG buffer
        * the output file path (UTF-8) if output_file was provided and the file was created</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer.toPNG', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer.toPNG" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">toPNG</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Args:</span>
<span class="sd">        text (str):</span>
<span class="sd">        font_size (int):</span>
<span class="sd">        output_file (str):</span>
<span class="sd">    Returns:</span>
<span class="sd">        str:</span>
<span class="sd">            * empty string if an error occurred</span>
<span class="sd">            * PNG buffer</span>
<span class="sd">            * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;png&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">data</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.hb_render.HarfBuzzRenderer.toSVG">
    <p>def <span class="ident">toSVG</span>(</p><p>self, text=None, font_size=None, output_file=&#39;&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Args:
    text (str):
    font_size (int):
    output_file (str):</p>
<p>Returns:
    str:
        * empty string if an error occurred
        * SVG (UTF-8) content
        * the output file path (UTF-8) if output_file was provided and the file was created</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer.toSVG', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer.toSVG" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">toSVG</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Args:</span>
<span class="sd">        text (str):</span>
<span class="sd">        font_size (int):</span>
<span class="sd">        output_file (str):</span>
<span class="sd">    Returns:</span>
<span class="sd">        str:</span>
<span class="sd">            * empty string if an error occurred</span>
<span class="sd">            * SVG (UTF-8) content</span>
<span class="sd">            * the output file path (UTF-8) if output_file was provided and the file was created</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_toImage</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="n">font_size</span><span class="p">,</span> <span class="n">output_file</span><span class="o">=</span><span class="n">output_file</span><span class="p">,</span> <span class="n">output_format</span><span class="o">=</span><span class="s1">&#39;svg&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">data</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</pre></div>

  </div>
</div>

  </div>
  
            
  <div class="item">
    <div class="name def" id="feaLab.hb_render.HarfBuzzRenderer.updateShapers">
    <p>def <span class="ident">updateShapers</span>(</p><p>self)</p>
    </div>
    

    
  
    <div class="desc"><p>Optional method to call <code>hb-shape</code>, get the list of HarfBuzz available
shapers and assign them to self.all_shapers. Also populate self.best_shaper
and self.os_shaper (the native platform shaper).</p>
<p>Returns:
    None:</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-feaLab.hb_render.HarfBuzzRenderer.updateShapers', this);">Show source &equiv;</a></p>
  <div id="source-feaLab.hb_render.HarfBuzzRenderer.updateShapers" class="source">
    <div class="codehilite"><pre><span></span><span class="k">def</span> <span class="nf">updateShapers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Optional method to call `hb-shape`, get the list of HarfBuzz available</span>
<span class="sd">    shapers and assign them to self.all_shapers. Also populate self.best_shaper</span>
<span class="sd">    and self.os_shaper (the native platform shaper).</span>
<span class="sd">    Returns:</span>
<span class="sd">        None:</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">hb_shape</span><span class="p">(</span><span class="n">list_shapers</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;win32&#39;</span><span class="p">):</span>
        <span class="k">if</span> <span class="s1">&#39;directwrite&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span> <span class="ow">and</span> <span class="s1">&#39;uniscribe&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;directwrite&#39;</span>
        <span class="k">elif</span> <span class="s1">&#39;uniscribe&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;uniscribe&#39;</span>
    <span class="k">elif</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;darwin&#39;</span><span class="p">):</span>
        <span class="k">if</span> <span class="s1">&#39;coretext&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span> <span class="o">=</span> <span class="s1">&#39;coretext&#39;</span>
    <span class="k">if</span> <span class="s1">&#39;ot&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">all_shapers</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">best_shaper</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">os_shaper</span>
</pre></div>

  </div>
</div>

  </div>
  
      </div>
      </div>

  </section>

    </article>
  <div class="clear"> </div>
  <footer id="footer">
    <p>
      Documentation generated by
      <a href="https://github.com/BurntSushi/pdoc">pdoc 0.3.2</a>
    </p>

    <p>pdoc is in the public domain with the
      <a href="http://unlicense.org">UNLICENSE</a></p>

    <p>Design by <a href="http://nadh.in">Kailash Nadh</a></p>
  </footer>
</div>
</body>
</html>
</file>

<file path="docs/pydocs/feaLab/index.html">
<!doctype html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

    <title>feaLab API documentation</title>
    <meta name="description" content="" />

  <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300' rel='stylesheet' type='text/css'>
  
  <style type="text/css">
  
* {
  box-sizing: border-box;
}
/*! normalize.css v1.1.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/**
 * 1. Prevent system color scheme's background color being used in Firefox, IE,
 *    and Opera.
 * 2. Prevent system color scheme's text color being used in Firefox, IE, and
 *    Opera.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 4. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    background: #fff; /* 1 */
    color: #000; /* 2 */
    font-size: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 4 */
    -ms-text-size-adjust: 100%; /* 4 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */

html,
button,
input,
select,
textarea {
    font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

h2 {
    font-size: 1.5em;
    margin: 0.83em 0;
}

h3 {
    font-size: 1.17em;
    margin: 1em 0;
}

h4 {
    font-size: 1em;
    margin: 1.33em 0;
}

h5 {
    font-size: 0.83em;
    margin: 1.67em 0;
}

h6 {
    font-size: 0.67em;
    margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

blockquote {
    margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */

p,
pre {
    margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */

q {
    quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */

q:before,
q:after {
    content: '';
    content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */

/**
 * Address margins set differently in IE 6/7.
 */

dl,
menu,
ol,
ul {
    margin: 1em 0;
}

dd {
    margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */

menu,
ol,
ul {
    padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */

nav ul,
nav ol {
    list-style: none;
    list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

  </style>

  <style type="text/css">
  
  html, body {
    margin: 0;
    padding: 0;
    min-height: 100%;
  }
  body {
    background: #fff;
    font-family: "Source Sans Pro", "Helvetica Neueue", Helvetica, sans;
    font-weight: 300;
    font-size: 16px;
    line-height: 1.6em;
  }
  #content {
    width: 70%;
    max-width: 850px;
    float: left;
    padding: 30px 60px;
    border-left: 1px solid #ddd;
  }
  #sidebar {
    width: 25%;
    float: left;
    padding: 30px;
    overflow: hidden;
  }
  #nav {
    font-size: 130%;
    margin: 0 0 15px 0;
  }

  #top {
    display: block;
    position: fixed;
    bottom: 5px;
    left: 5px;
    font-size: .85em;
    text-transform: uppercase;
  }

  #footer {
    font-size: .75em;
    padding: 5px 30px;
    border-top: 1px solid #ddd;
    text-align: right;
  }
    #footer p {
      margin: 0 0 0 30px;
      display: inline-block;
    }

  h1, h2, h3, h4, h5 {
    font-weight: 300;
  }
  h1 {
    font-size: 2.5em;
    line-height: 1.1em;
    margin: 0 0 .50em 0;
  }

  h2 {
    font-size: 1.75em;
    margin: 1em 0 .50em 0;
  }

  h3 {
    margin: 25px 0 10px 0;
  }

  h4 {
    margin: 0;
    font-size: 105%;
  }

  a {
    color: #058;
    text-decoration: none;
    transition: color .3s ease-in-out;
  }

  a:hover {
    color: #e08524;
    transition: color .3s ease-in-out;
  }

  pre, code, .mono, .name {
    font-family: "Ubuntu Mono", "Cousine", "DejaVu Sans Mono", monospace;
  }

  .title .name {
    font-weight: bold;
  }
  .section-title {
    margin-top: 2em;
  }
  .ident {
    color: #900;
  }

  code {
    background: #f9f9f9;
  } 

  pre {
    background: #fefefe;
    border: 1px solid #ddd;
    box-shadow: 2px 2px 0 #f3f3f3;
    margin: 0 30px;
    padding: 15px 30px;
  }

  .codehilite {
    margin: 0 30px 10px 30px;
  }

    .codehilite pre {
      margin: 0;
    }
    .codehilite .err { background: #ff3300; color: #fff !important; } 

  table#module-list {
    font-size: 110%;
  }

    table#module-list tr td:first-child {
      padding-right: 10px;
      white-space: nowrap;
    }

    table#module-list td {
      vertical-align: top;
      padding-bottom: 8px;
    }

      table#module-list td p {
        margin: 0 0 7px 0;
      }

  .def {
    display: table;
  }

    .def p {
      display: table-cell;
      vertical-align: top;
      text-align: left;
    }

    .def p:first-child {
      white-space: nowrap;
    }

    .def p:last-child {
      width: 100%;
    }


  #index {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
    ul#index .class_name {
      /* font-size: 110%; */
      font-weight: bold;
    }
    #index ul {
      margin: 0;
    }

  .item {
    margin: 0 0 15px 0;
  }

    .item .class {
      margin: 0 0 25px 30px;
    }

      .item .class ul.class_list {
        margin: 0 0 20px 0;
      }

    .item .name {
      background: #fafafa;
      margin: 0;
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 3px;
      display: inline-block;
      min-width: 40%;
    }
      .item .name:hover {
        background: #f6f6f6;
      }

    .item .empty_desc {
      margin: 0 0 5px 0;
      padding: 0;
    }

    .item .inheritance {
      margin: 3px 0 0 30px;
    }

    .item .inherited {
      color: #666;
    }

    .item .desc {
      padding: 0 8px;
      margin: 0;
    }

      .item .desc p {
        margin: 0 0 10px 0;
      }

    .source_cont {
      margin: 0;
      padding: 0;
    }

    .source_link a {
      background: #ffc300;
      font-weight: 400;
      font-size: .75em;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 1px 1px 0 #f4b700;
      
      padding: 3px 8px;
      border-radius: 2px;
      transition: background .3s ease-in-out;
    }
      .source_link a:hover {
        background: #FF7200;
        text-shadow: none;
        transition: background .3s ease-in-out;
      }

    .source {
      display: none;
      max-height: 600px;
      overflow-y: scroll;
      margin-bottom: 15px;
    }

      .source .codehilite {
        margin: 0;
      }

  .desc h1, .desc h2, .desc h3 {
    font-size: 100% !important;
  }
  .clear {
    clear: both;
  }

  @media all and (max-width: 950px) {
    #sidebar {
      width: 35%;
    }
    #content {
      width: 65%;
    }
  }
  @media all and (max-width: 650px) {
    #top {
      display: none;
    }
    #sidebar {
      float: none;
      width: auto;
    }
    #content {
      float: none;
      width: auto;
      padding: 30px;
    }

    #index ul {
      padding: 0;
      margin-bottom: 15px;
    }
    #index ul li {
      display: inline-block;
      margin-right: 30px;
    }
    #footer {
      text-align: left;
    }
    #footer p {
      display: block;
      margin: inherit;
    }
  }

  /*****************************/

  </style>

  <style type="text/css">
  .codehilite .hll { background-color: #ffffcc }
.codehilite  { background: #f8f8f8; }
.codehilite .c { color: #408080; font-style: italic } /* Comment */
.codehilite .err { border: 1px solid #FF0000 } /* Error */
.codehilite .k { color: #008000; font-weight: bold } /* Keyword */
.codehilite .o { color: #666666 } /* Operator */
.codehilite .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
.codehilite .cm { color: #408080; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #BC7A00 } /* Comment.Preproc */
.codehilite .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
.codehilite .c1 { color: #408080; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #408080; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #A00000 } /* Generic.Deleted */
.codehilite .ge { font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #FF0000 } /* Generic.Error */
.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.codehilite .gi { color: #00A000 } /* Generic.Inserted */
.codehilite .go { color: #888888 } /* Generic.Output */
.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.codehilite .gs { font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.codehilite .gt { color: #0044DD } /* Generic.Traceback */
.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.codehilite .kp { color: #008000 } /* Keyword.Pseudo */
.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.codehilite .kt { color: #B00040 } /* Keyword.Type */
.codehilite .m { color: #666666 } /* Literal.Number */
.codehilite .s { color: #BA2121 } /* Literal.String */
.codehilite .na { color: #7D9029 } /* Name.Attribute */
.codehilite .nb { color: #008000 } /* Name.Builtin */
.codehilite .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.codehilite .no { color: #880000 } /* Name.Constant */
.codehilite .nd { color: #AA22FF } /* Name.Decorator */
.codehilite .ni { color: #999999; font-weight: bold } /* Name.Entity */
.codehilite .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.codehilite .nf { color: #0000FF } /* Name.Function */
.codehilite .nl { color: #A0A000 } /* Name.Label */
.codehilite .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */
.codehilite .nv { color: #19177C } /* Name.Variable */
.codehilite .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.codehilite .w { color: #bbbbbb } /* Text.Whitespace */
.codehilite .mb { color: #666666 } /* Literal.Number.Bin */
.codehilite .mf { color: #666666 } /* Literal.Number.Float */
.codehilite .mh { color: #666666 } /* Literal.Number.Hex */
.codehilite .mi { color: #666666 } /* Literal.Number.Integer */
.codehilite .mo { color: #666666 } /* Literal.Number.Oct */
.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */
.codehilite .sc { color: #BA2121 } /* Literal.String.Char */
.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */
.codehilite .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */
.codehilite .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.codehilite .sx { color: #008000 } /* Literal.String.Other */
.codehilite .sr { color: #BB6688 } /* Literal.String.Regex */
.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */
.codehilite .ss { color: #19177C } /* Literal.String.Symbol */
.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */
.codehilite .vc { color: #19177C } /* Name.Variable.Class */
.codehilite .vg { color: #19177C } /* Name.Variable.Global */
.codehilite .vi { color: #19177C } /* Name.Variable.Instance */
.codehilite .il { color: #666666 } /* Literal.Number.Integer.Long */
  </style>

  <style type="text/css">
  
/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /* Style adjustments for viewports that meet the condition */
}

@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

  </style>

  <script type="text/javascript">
  function toggle(id, $link) {
    $node = document.getElementById(id);
    if (!$node)
    return;
    if (!$node.style.display || $node.style.display == 'none') {
    $node.style.display = 'block';
    $link.innerHTML = 'Hide source &nequiv;';
    } else {
    $node.style.display = 'none';
    $link.innerHTML = 'Show source &equiv;';
    }
  }
  </script>
</head>
<body>
<a href="#" id="top">Top</a>

<div id="container">
    
  
  <div id="sidebar">
    <h1>Index</h1>
    <ul id="index">



    <li class="set"><h3><a href="#header-submodules">Sub-modules</a></h3>
      <ul>
        <li class="mono"><a href="hb_render.m.html">feaLab.hb_render</a></li>
        <li class="mono"><a href="writers/index.html">feaLab.writers</a></li>
      </ul>
    </li>
    </ul>
  </div>

    <article id="content">
      
  

  


  <header id="section-intro">
  <h1 class="title"><span class="name">feaLab</span> module</h1>
  
  

  </header>

  <section id="section-items">



    <h2 class="section-title" id="header-submodules">Sub-modules</h2>
      <div class="item">
      <p class="name"><a href="hb_render.m.html">feaLab.hb_render</a></p>
      
  
    <div class="desc"><p>hb_render.py</p>
<p>hb_render.HarfBuzzRenderer class </p>
<p>wraps the 'hb-view' and 'hb-shape' Harfbuzz utilities
<em> https://github.com/behdad/harfbuzz
using the Python 'sh' module
</em> https://amoffat.github.io/sh/
* https://pypi.python.org/pypi/sh</p></div>

      </div>
      <div class="item">
      <p class="name"><a href="writers/index.html">feaLab.writers</a></p>
      
  

      </div>
  </section>

    </article>
  <div class="clear"> </div>
  <footer id="footer">
    <p>
      Documentation generated by
      <a href="https://github.com/BurntSushi/pdoc">pdoc 0.3.2</a>
    </p>

    <p>pdoc is in the public domain with the
      <a href="http://unlicense.org">UNLICENSE</a></p>

    <p>Design by <a href="http://nadh.in">Kailash Nadh</a></p>
  </footer>
</div>
</body>
</html>
</file>

<file path="docs/_config.yml">
theme: jekyll-theme-minimal
</file>

<file path="docs/index.html">
<h1 id="fealab">feaLab</h1>
<p>Tools for dealing with OpenType Layout features and the AFDKO FEA language. See <a href="./pydocs/feaLab/">pydocs</a>.</p>
</file>

<file path="Lib/feaLab/test/LICENSE.txt">
Copyright (c) 2010-2013 Georg Duffner (http://www.georgduffner.at)

All "EB Garamond" Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.
</file>

<file path="pydocs/feaLab/writers/index.md">
Module feaLab.writers
---------------------

Sub-modules
-----------
    feaLab.writers.kernFeatureNoWriter
    feaLab.writers.markFeatureNoWriter
</file>

<file path="pydocs/feaLab/writers/kernFeatureNoWriter.m.md">
Module feaLab.writers.kernFeatureNoWriter
-----------------------------------------

Classes
-------
KernFeatureWriter 
    Skips generating the kern feature.

    Ancestors (in MRO)
    ------------------
    feaLab.writers.kernFeatureNoWriter.KernFeatureWriter
    __builtin__.object

    Methods
    -------
    __init__(self, font)

    write(self, linesep='\n')
</file>

<file path="pydocs/feaLab/writers/markFeatureNoWriter.m.md">
Module feaLab.writers.markFeatureNoWriter
-----------------------------------------

Classes
-------
MarkFeatureWriter 
    Skips generating the mark and mkmk features.

    Ancestors (in MRO)
    ------------------
    feaLab.writers.markFeatureNoWriter.MarkFeatureWriter
    __builtin__.object

    Methods
    -------
    __init__(self, font, anchorList=(), mkmkAnchorList=(), ligaAnchorList=())

    write(self, doMark=False, doMkmk=False)
</file>

<file path="pydocs/feaLab/hb_render.m.md">
Module feaLab.hb_render
-----------------------

Variables
---------
HB_VIEW

Functions
---------
main()

test()

Classes
-------
HarfBuzzRenderer 
    Class to call the HarfBuzz `hb-view` or `hb-shape` tools via the `sh` module.

    Attributes:
        best_shaper (str):
            default HB shaper after hb.updateShapers(), otherwise 'ot'

        all_shapers (list):
            all available HB shapers after hb.updateShapers()

        os_shaper (str):
            default native platform HB shaper after hb.updateShapers()

        use_shapers (list):
            list of shapers for HB to try, used to call `hb-view` or `hb-shape`

        output_format (str):
            output format for `hb-view` / hb.toImage()
            can be 'svg' | 'png' | 'pdf' | 'ansi' | 'ps' | 'eps'
            default: 'svg'

        font_file (str):
            path to font file

        face_index (int):
            if font file is a TTC, the TTC sub-fontindex, otherwise 0

        font_size (int):
            the font size in pt to to use with `hb-shape` or `hb-view`
            default: 0 (means 'upem')

        text (unicode):
            input text as Unicode

        direction (str):
            text shaping direction
            can be: 'ltr' | 'rtl' | 'ttb' | 'btt' | 'auto'
            default: 'auto'

        script (str):
            ISO 15924 tag (not OpenType Script tag) for shaping, or 'auto'
            default: 'auto'

        language (str):
            ISO language tag (not OpenType LangSys tag) for shaping
            default: 'en'

        features (list):
            Features can be enabled or disabled, either globally or limited to
            specific character ranges.  The format for specifying feature settings
            follows.  All valid CSS font-feature-settings values other than 'normal'
            and 'inherited' are also accepted, though, not documented below.

            The range indices refer to the positions between Unicode characters,
            unless the --utf8-clusters is provided, in which case range indices
            refer to UTF-8 byte indices. The position before the first character
            is always 0.

            The format is Python-esque.  Here is how it all works:
                Syntax:       Value:    Start:    End:

            Setting value:
                "kern"        1         0         $         # Turn feature on
                "+kern"       1         0         $         # Turn feature on
                "-kern"       0         0         $         # Turn feature off
                "kern=0"      0         0         $         # Turn feature off
                "kern=1"      1         0         $         # Turn feature on
                "aalt=2"      2         0         $         # Choose 2nd alternate

            Setting index:
                "kern[]"      1         0         $         # Turn feature on
                "kern[:]"     1         0         $         # Turn feature on
                "kern[5:]"    1         5         $         # Turn feature on, partial
                "kern[:5]"    1         0         5         # Turn feature on, partial
                "kern[3:5]"   1         3         5         # Turn feature on, range
                "kern[3]"     1         3         3+1       # Turn feature on, single char

            Mixing it all:
                "aalt[3:5]=2" 2         3         5         # Turn 2nd alternate on for range

            Example: hb.features=["aalt[3:5]=2","+kern","-liga"]

        bot (bool):
            Treat text as beginning_of_paragraph
        eot (bool):
            Treat text as end_of_paragraph
        text_before (unicode):
            Set text context before each line
        text_after (unicode):
            Set text context after each line
        preserve_default_ignorables (bool):
            Preserve Default_Ignorable characters, default: False
        utf8_clusters (bool):
            Use UTF8 byte indices, not char indices, default: False
        cluster_level (int):
            Cluster merging level: 0 | 1 | 2, default: 0
        normalize_glyphs (bool):
            Rearrange glyph clusters in nominal order
        num_iterations (int):
            Run shaper N times (default: 1)
        use_glyph_indexes (bool)
            Output glyph indices instead of names, like --no_glyph_names in `hb-*`
            default: False

        annotate (bool)
            Annotate output in hb.toImage()
            default: False
        background (str)
            Set background color '#rrggbb' | '#rrggbbaa' in hb.toImage()
            default: '#ffffff'
        foreground (str)
            Set foreground color '#rrggbb' | '#rrggbbaa' in hb.toImage()
            default: '#000000'
        line_space (int)
            add line gap between lines in units in hb.toImage()
            default: 0
        margin (list or int)
            Margin around output in hb.toImage()
            as one number or list of one to four numbers e.g. [16, 16, 16, 16]
            default: 16

    Ancestors (in MRO)
    ------------------
    feaLab.hb_render.HarfBuzzRenderer
    __builtin__.object

    Instance variables
    ------------------
    all_shapers

    annotate

    background

    best_shaper

    bot

    cluster_level

    direction

    eot

    face_index

    features

    font_file

    font_size

    foreground

    language

    line_space

    margin

    normalize_glyphs

    num_iterations

    os_shaper

    preserve_default_ignorables

    script

    text

    text_after

    text_before

    use_glyph_indexes

    use_shapers

    utf8_clusters

    Methods
    -------
    __init__(self, font_file=None, face_index=0, text=u'')
        Initialize the HarfBuzzRenderer() object

        Args:
            font_file (str, optional): the path to the font file
            face_index (int, optional): the face index in a TTC file, 0 if non-TTC
            text (unicode, optional): Unicode text string to shape or render

    openFont(self, font_file, face_index=0)
        Convenience method to load a new font file

        Args:
            font_file (str):
            face_index (int, optional):

    toJson(self, text=None)
        Method to call hb_shape and get back the shaped JSON

        Args:
            text (unicode, optional): optional text, otherwise uses self.text

        Returns:
            None: if an error occurred
            list[dict, ...]: parsed JSON structure in `hb-shape` output format

        Example input:
            hb.toJson(text='Hello'))

        Example output:
            [
                {u'g': u'H', u'cl': 0, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 741},
                {u'g': u'e', u'cl': 1, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 421},
                {u'g': u'l', u'cl': 2, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 258},
                {u'g': u'l', u'cl': 3, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 253},
                {u'g': u'o', u'cl': 4, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 510}
            ]

    toPDF(self, text=None, font_size=None, output_file='')
        Args:
            text (str):
            font_size (int):
            output_file (str):

        Returns:
            str:
                * empty string if an error occurred
                * PDF buffer
                * the output file path (UTF-8) if output_file was provided and the file was created

    toPNG(self, text=None, font_size=None, output_file='')
        Args:
            text (str):
            font_size (int):
            output_file (str):

        Returns:
            str:
                * empty string if an error occurred
                * PNG buffer
                * the output file path (UTF-8) if output_file was provided and the file was created

    toSVG(self, text=None, font_size=None, output_file='')
        Args:
            text (str):
            font_size (int):
            output_file (str):

        Returns:
            str:
                * empty string if an error occurred
                * SVG (UTF-8) content
                * the output file path (UTF-8) if output_file was provided and the file was created

    updateShapers(self)
        Optional method to call `hb-shape`, get the list of HarfBuzz available
        shapers and assign them to self.all_shapers. Also populate self.best_shaper
        and self.os_shaper (the native platform shaper).

        Returns:
            None:
</file>

<file path="pydocs/feaLab/index.md">
Module feaLab
-------------

Sub-modules
-----------
    feaLab.hb_render
    feaLab.writers
</file>

<file path="install-macos.command">
#!/usr/bin/env bash

dir=${0%/*}
if [ "$dir" = "$0" ]; then
  dir="."
fi
cd "$dir"

# Check if Homebrew is installed
if [ ! -x "$(which brew)" ]; then
	echo "# You must install Homebrew first!"
	open "http://brew.sh/"
	exit 1
fi

# Install harfbuzz if needed
if [ ! -x "$(which hb-view)" ]; then
	echo "# Install 'harfbuzz'"
	brew install harfbuzz
else
	echo "# 'harfbuzz' is installed."
fi 

# Install me
echo "# Install 'feaLab'"
pip install --user --upgrade -r py-requirements.txt
pip install --user --upgrade .
echo "# Done!"
</file>

<file path="LICENSE.txt">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "{}"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright {yyyy} {name of copyright owner}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="py-requirements.txt">
sh>=1.11
</file>

<file path="README.md">
# feaLab
Tools for dealing with OpenType Layout features and the AFDKO FEA language. See [pydocs](./pydocs/feaLab/).
</file>

<file path="Lib/feaLab/writers/kernFeatureNoWriter.py">
class KernFeatureWriter:
    """Skips generating the kern feature."""

    def __init__(self, font):
        pass

    def write(self, linesep="\n"):
        return ""
</file>

<file path="Lib/feaLab/writers/markFeatureNoWriter.py">
class MarkFeatureWriter:
    """Skips generating the mark and mkmk features."""

    def __init__(self, font, anchorList=(), mkmkAnchorList=(), ligaAnchorList=()):
        pass

    def write(self, doMark=False, doMkmk=False):
        return ""
</file>

<file path="Lib/feaLab/hb_scripts3.py">
#!/usr/bin/env python3
"""
Mini-module to convert between Unicode and OpenType
script tags.

Uses the 'harfpy' ctypes-based Python 3 bindings for HarfBuzz
https://github.com/ldo/harfpy

1. Until https://github.com/ldo/harfpy/pull/12 is merged, use:
https://github.com/twardoch/harfpy

2. On macOS, works with HarfBuzz installed via
brew install harfbuzz

3. On Windows, should work with the prebuilt binaries from
https://www.freedesktop.org/software/harfbuzz/release/

4. The actual conversion functions are implemented in:
https://github.com/harfbuzz/harfbuzz/blob/master/src/hb-ot-tag.cc
"""

__version__ = "0.0.1"

import re

import fontTools.unicodedata as ud
import harfbuzz as hb
from fontTools.misc.py23 import *

hbu = hb.UnicodeFuncs.get_default()


def _getTag(s):
    s = s.ljust(4)[:4].encode()
    return hb.HB.TAG(s)


def isoScript(s):
    tag = _getTag(s)
    rtag = hb.script_to_iso15924_tag(hb.hb.hb_ot_tag_to_script(tag))
    if rtag == 0:
        return "Zyyy"
    else:
        return hb.tag_to_string(rtag)


def otScripts(s):
    s = isoScript(s)
    if s in ("Zinh", "Zyyy", "Zzzz"):
        return ["DFLT"]
    else:
        tag = _getTag(s)
        scripts = [hb.tag_to_string(tag) for tag in hb.ot_tags_from_script(tag)]
        if scripts[1] == "DFLT":
            return scripts[:1]
        else:
            return scripts


def otScript(s):
    return otScripts(s)[0]


def charScript(char):
    code = byteord(char)
    return hb.tag_to_string(hbu.script(code))


def getIsoToOtScriptMap():
    OTSCRIPTS = {
        isoScript: otScripts(isoScript) for isoScript in ud.Scripts.NAMES.keys()
    }
    return OTSCRIPTS


def updateLanguageSystemsInFea(feaText="", ftFont=None, unicodes=[]):
    if ftFont:
        unicodes = []
        tCmap = ftFont["cmap"]
        cmap = tCmap.getcmap(3, 10)
        if not cmap:
            cmap = tCmap.getcmap(3, 1)
        if not cmap:
            cmap = tCmap.getcmap(0, 3)
        if not cmap:
            cmap = tCmap.getcmap(3, 0)
        if cmap:
            unicodes = cmap.cmap.keys()

    feaLines = []
    langsyses = []
    for line in feaText.splitlines():
        langsys = None
        for script, lang in re.findall(
            r"^.*?languagesystem\s+([A-Za-z]{4})\s+([A-Z]+|dflt)\s*;", line
        ):
            langsys = (script, lang)
        if langsys:
            langsyses.append(langsys)
        else:
            feaLines.append(line)
    for u in unicodes:
        langsys = (otScript(charScript(u)), "dflt")
        langsyses.append(langsys)
    langsysesFirst = [("DFLT", "dflt"), ("latn", "dflt")]
    langsyses = set(langsyses) - set(langsysesFirst)
    langsyses = langsysesFirst + sorted(list(langsyses))
    langsysLines = [f"languagesystem {l[0]} {l[1]};" for l in langsyses]
    feaText = "\n".join(langsysLines + feaLines)
    return feaText


if __name__ == "__main__":
    # print(isoScript('dev2'))
    # print(otScript('DFLT'))
    # print(otScript('Zzzz'))
    # print(otScript('Zyyy'))
    # print(otScript('Zinh'))
    # print(otScript('Latn'))
    # print(otScript('dev2'))
    # print(otScript('Grek'))
    # print(otScript('deva'))
    # print(charScript('আ'))
    # print(ud.script('আ'))
    print(getIsoToOtScriptMap())

    fea = """
languagesystem DFLT dflt;
languagesystem latn dflt;
languagesystem latn PLK;
languagesystem cyrl dflt;
languagesystem cyrl SRB;
# Comment
feature smcp { 
  sub a by a.sc;
} smcp;
"""
    print(updateLanguageSystemsInFea(feaText=fea, unicodes=[0x010A, 0x20AC, 0x063C]))
</file>

<file path="makedocs.py">
#!/usr/bin/env python
import os
import warnings

try:
    from sh import pdoc

    isPdoc = True
except ImportError:
    warnings.warn("Run: pip install --user pdoc")
    isPdoc = False

pydocs = os.path.join(os.path.realpath(os.path.dirname(__file__)), "pydocs")
if not os.path.isdir(pydocs):
    os.makedirs(pydocs)
pdoc(
    "feaLab",
    _cwd=pydocs,
    html=False,
    all_submodules=True,
    external_links=True,
    overwrite=True,
)

pydocs = os.path.join(os.path.realpath(os.path.dirname(__file__)), "docs", "pydocs")
if not os.path.isdir(pydocs):
    os.makedirs(pydocs)
pdoc(
    "feaLab",
    _cwd=pydocs,
    html=True,
    all_submodules=True,
    external_links=True,
    overwrite=True,
)

try:
    from sh import pandoc

    isPandoc = True
except ImportError:
    warnings.warn("Run: brew install pandoc")
    isPandoc = False

if isPandoc:
    readmepath = os.path.join(os.path.realpath(os.path.dirname(__file__)), "README.md")
    if os.path.exists(readmepath):
        long_description = pandoc(
            readmepath, read="markdown", write="html", output="docs/index.html"
        )
</file>

<file path="setup.py">
import sys
from codecs import open
from os import path

from setuptools import find_packages, setup

try:
    from sh import pandoc

    isPandoc = True
except ImportError:
    isPandoc = False

# Get the long description from the README file
readmepath = path.join(path.realpath(path.dirname(__file__)), "README.md")
if path.exists(readmepath):
    if isPandoc:
        long_description = pandoc(readmepath, read="markdown", write="rst")
    else:
        long_description = open(readmepath, encoding="utf-8").read()

needs_pytest = {"pytest", "test"}.intersection(sys.argv)
pytest_runner = ["pytest_runner"] if needs_pytest else []
needs_wheel = {"bdist_wheel"}.intersection(sys.argv)
wheel = ["wheel"] if needs_wheel else []

setup(
    name="feaLab",
    # Versions should comply with PEP440.  For a discussion on single-sourcing
    # the version across setup.py and the project code, see
    # https://packaging.python.org/en/latest/single_source_version.html
    version="0.3.0",
    description="Tools for dealing with OpenType Layout and the Adobe FDK for OpenType FEA code.",
    long_description=long_description,
    # The project's main homepage.
    url="https://github.com/twardoch/feaLab",
    download_url="https://github.com/twardoch/feaLab/archive/master.zip",
    # Author details
    author="Adam Twardoch",
    author_email="adam+github@twardoch.com",
    # Choose your license
    license="LICENSE.txt",
    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        "Environment :: MacOS X",
        "Environment :: Console",
        "Operating System :: MacOS :: MacOS X",
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        "Development Status :: 3 - Alpha",
        # Indicate who your project is intended for
        "Intended Audience :: Developers",
        "Topic :: Multimedia :: Graphics",
        "Topic :: Multimedia :: Graphics :: Graphics Conversion",
        "Topic :: Multimedia :: Graphics :: Editors :: Vector-Based",
        "Topic :: Software Development :: Libraries :: Python Modules",
        # Pick your license as you wish (should match "license" above)
        "License :: OSI Approved :: Apache Software License",
        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        "Programming Language :: Python :: 2.7",
    ],
    # What does your project relate to?
    keywords=["opentype", "font", "harfbuzz", "afdko", "svg", "fea"],
    # You can just specify the packages manually here if your project is
    # simple. Or you can use find_packages().
    package_dir={"": "Lib"},
    packages=find_packages("Lib"),
    include_package_data=True,
    setup_requires=pytest_runner + wheel,
    tests_require=[
        "pytest>=2.8",
    ],
    # List run-time dependencies here.  These will be installed by pip when
    # your project is installed. For an analysis of "install_requires" vs pip's
    # requirements files see:
    # https://packaging.python.org/en/latest/requirements.html
    install_requires=[
        "sh>=1.11",
    ],
    # To provide executable scripts, use entry points in preference to the
    # "scripts" keyword. Entry points provide cross-platform support and allow
    # pip to create the appropriate form of executable for the target platform.
    entry_points={
        "console_scripts": [
            "hb_render=feaLab.hb_render:main",
        ],
    },
)
</file>

<file path=".gitignore">
.mypy_cache/

# Mac OS X internals
*.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Bower and NPM libraries
bower_components
node_modules

# Build files
build
MANIFEST
site

# PyCharm CE files
.idea/

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*,cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# dotenv
.env

# virtualenv
.venv/
venv/
ENV/

# Spyder project settings
.spyderproject

# Rope project settings
.ropeproject
</file>

<file path="Lib/feaLab/hb_render.py">
#!/usr/bin/env python
"""hb_render.py

hb_render.HarfBuzzRenderer class

wraps the 'hb-view' and 'hb-shape' Harfbuzz utilities
* https://github.com/behdad/harfbuzz
using the Python 'sh' module
* https://amoffat.github.io/sh/
* https://pypi.python.org/pypi/sh

"""

import json
import os.path
import sys
import warnings

try:
    from sh import hb_shape
except ImportError:
    warnings.warn("Run: brew install harfbuzz")
    warnings.warn("Run: pip install --user sh")
try:
    from sh import hb_view

    HB_VIEW = True
    """
    """
except ImportError:
    HB_VIEW = False

__version__ = "0.3"


class HarfBuzzRenderer:
    """Class to call the HarfBuzz `hb-view` or `hb-shape` tools via the `sh` module.

    Attributes:
        best_shaper (str):
            default HB shaper after hb.updateShapers(), otherwise 'ot'

        all_shapers (list):
            all available HB shapers after hb.updateShapers()

        os_shaper (str):
            default native platform HB shaper after hb.updateShapers()

        use_shapers (list):
            list of shapers for HB to try, used to call `hb-view` or `hb-shape`

        output_format (str):
            output format for `hb-view` / hb.toImage()
            can be 'svg' | 'png' | 'pdf' | 'ansi' | 'ps' | 'eps'
            default: 'svg'

        font_file (str):
            path to font file

        face_index (int):
            if font file is a TTC, the TTC sub-fontindex, otherwise 0

        font_size (int):
            the font size in pt to to use with `hb-shape` or `hb-view`
            default: 0 (means 'upem')

        text (unicode):
            input text as Unicode

        direction (str):
            text shaping direction
            can be: 'ltr' | 'rtl' | 'ttb' | 'btt' | 'auto'
            default: 'auto'

        script (str):
            ISO 15924 tag (not OpenType Script tag) for shaping, or 'auto'
            default: 'auto'

        language (str):
            ISO language tag (not OpenType LangSys tag) for shaping
            default: 'en'

        features (list):
            Features can be enabled or disabled, either globally or limited to
            specific character ranges.  The format for specifying feature settings
            follows.  All valid CSS font-feature-settings values other than 'normal'
            and 'inherited' are also accepted, though, not documented below.

            The range indices refer to the positions between Unicode characters,
            unless the --utf8-clusters is provided, in which case range indices
            refer to UTF-8 byte indices. The position before the first character
            is always 0.

            The format is Python-esque.  Here is how it all works:
                Syntax:       Value:    Start:    End:

            Setting value:
                "kern"        1         0         $         # Turn feature on
                "+kern"       1         0         $         # Turn feature on
                "-kern"       0         0         $         # Turn feature off
                "kern=0"      0         0         $         # Turn feature off
                "kern=1"      1         0         $         # Turn feature on
                "aalt=2"      2         0         $         # Choose 2nd alternate

            Setting index:
                "kern[]"      1         0         $         # Turn feature on
                "kern[:]"     1         0         $         # Turn feature on
                "kern[5:]"    1         5         $         # Turn feature on, partial
                "kern[:5]"    1         0         5         # Turn feature on, partial
                "kern[3:5]"   1         3         5         # Turn feature on, range
                "kern[3]"     1         3         3+1       # Turn feature on, single char

            Mixing it all:
                "aalt[3:5]=2" 2         3         5         # Turn 2nd alternate on for range

            Example: hb.features=["aalt[3:5]=2","+kern","-liga"]

        bot (bool):
            Treat text as beginning_of_paragraph
        eot (bool):
            Treat text as end_of_paragraph
        text_before (unicode):
            Set text context before each line
        text_after (unicode):
            Set text context after each line
        preserve_default_ignorables (bool):
            Preserve Default_Ignorable characters, default: False
        utf8_clusters (bool):
            Use UTF8 byte indices, not char indices, default: False
        cluster_level (int):
            Cluster merging level: 0 | 1 | 2, default: 0
        normalize_glyphs (bool):
            Rearrange glyph clusters in nominal order
        num_iterations (int):
            Run shaper N times (default: 1)
        use_glyph_indexes (bool)
            Output glyph indices instead of names, like --no_glyph_names in `hb-*`
            default: False

        annotate (bool)
            Annotate output in hb.toImage()
            default: False
        background (str)
            Set background color '#rrggbb' | '#rrggbbaa' in hb.toImage()
            default: '#ffffff'
        foreground (str)
            Set foreground color '#rrggbb' | '#rrggbbaa' in hb.toImage()
            default: '#000000'
        line_space (int)
            add line gap between lines in units in hb.toImage()
            default: 0
        margin (list or int)
            Margin around output in hb.toImage()
            as one number or list of one to four numbers e.g. [16, 16, 16, 16]
            default: 16

    """

    def __init__(self, font_file=None, face_index=0, text=""):
        """Initialize the HarfBuzzRenderer() object

        Args:
            font_file (str, optional): the path to the font file
            face_index (int, optional): the face index in a TTC file, 0 if non-TTC
            text (unicode, optional): Unicode text string to shape or render
        """
        self.best_shaper = "ot"
        self.all_shapers = [self.best_shaper]
        self.os_shaper = self.best_shaper

        self.use_shapers = [self.best_shaper]

        self.font_file = font_file
        self.face_index = face_index
        self.font_size = 0

        self.text = text

        self.direction = "auto"
        self.language = "en"
        self.script = "auto"
        self.features = []

        self.bot = False  #
        self.eot = False  #
        self.text_before = ""  #
        self.text_after = ""  #

        self.preserve_default_ignorables = False  #
        self.utf8_clusters = False  #
        self.cluster_level = 0  #
        self.normalize_glyphs = False  #
        self.num_iterations = 1  #
        self.use_glyph_indexes = False  # Output glyph indices instead of names

        self.annotate = False  # Annotate output toing
        self.background = (
            "#ffffff"  # Set background color (rrggbb/rrggbbaa default: #FFFFFF)
        )
        self.foreground = (
            "#000000"  # Set foreground color (rrggbb/rrggbbaa, default: #000000)
        )
        self.line_space = 0  # Set space between lines in units (default: 0)
        self.margin = [
            16,
            16,
            16,
            16,
        ]  # Margin around output (one to four numbers , default: 16)

    def updateShapers(self):
        """Optional method to call `hb-shape`, get the list of HarfBuzz available
        shapers and assign them to self.all_shapers. Also populate self.best_shaper
        and self.os_shaper (the native platform shaper).

        Returns:
            None:
        """
        self.all_shapers = str(hb_shape(list_shapers=True)).splitlines()
        if sys.platform.startswith("win32"):
            if (
                "directwrite" in self.all_shapers
                and "uniscribe" not in self.all_shapers
            ):
                self.os_shaper = "directwrite"
            elif "uniscribe" in self.all_shapers:
                self.os_shaper = "uniscribe"
        elif sys.platform.startswith("darwin"):
            if "coretext" in self.all_shapers:
                self.os_shaper = "coretext"
        if "ot" not in self.all_shapers:
            self.best_shaper = self.os_shaper

    def openFont(self, font_file, face_index=0):
        """Convenience method to load a new font file

        Args:
            font_file (str):
            face_index (int, optional):
        """
        if os.path.exists(font_file):
            self.font_file = font_file
            self.face_index = face_index
        else:
            warnings.warn("Cannot open %s" % (font_file))
            self.font_file = None
            self.face_index = 0

    def _hb_shape(self, **kwargs):
        """Low-level method to call the `hb-shape` tool via the
        hb_shape virtual function provided by the `sh` module.

        Args:
            **kwargs (): passed from self.toJson()
                must be compatible with the `hb-shape` arguments
                where `--option-name=value` translates to option_name=value

        Returns:
            sh.RunningCommand:
        """
        return hb_shape(**kwargs)

    def _hb_view(self, **kwargs):
        """Low-level method to call the `hb-view` tool via the
        hb_view virtual function provided by the `sh` module.

        Args:
            **kwargs (): passed from self.toImage()
                must be compatible with the `hb-view` arguments
                where `--option-name=value` translates to option_name=value

        Returns:
            sh.RunningCommand:
        """
        return hb_view(**kwargs)

    def toJson(self, text=None):
        """Method to call hb_shape and get back the shaped JSON

        Args:
            text (unicode, optional): optional text, otherwise uses self.text

        Returns:
            None: if an error occurred
            list[dict, ...]: parsed JSON structure in `hb-shape` output format

        Example input:
            hb.toJson(text='Hello'))

        Example output:
            [
                {u'g': u'H', u'cl': 0, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 741},
                {u'g': u'e', u'cl': 1, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 421},
                {u'g': u'l', u'cl': 2, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 258},
                {u'g': u'l', u'cl': 3, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 253},
                {u'g': u'o', u'cl': 4, u'dx': 0, u'dy': 0, u'ay': 0, u'ax': 510}
            ]
        """
        text = text if text else self.text
        self.text = text
        hb_in = text.encode("utf-8")
        hb_out = self._hb_shape(
            _encoding="UTF-8",
            _in=hb_in,
            bot=self.bot,
            cluster_level=self.cluster_level,
            direction=self.direction,
            eot=self.eot,
            face_index=self.face_index,
            features=",".join(self.features),
            font_file=self.font_file,
            font_size="upem" if self.font_size == 0 else self.font_size,
            language=self.language,
            no_glyph_names=self.use_glyph_indexes,
            normalize_glyphs=self.normalize_glyphs,
            num_iterations=self.num_iterations,
            output_format="json",
            preserve_default_ignorables=self.preserve_default_ignorables,
            script=self.script,
            shapers=",".join(self.use_shapers),
            show_extents=False,
            show_text=False,
            show_unicode=False,
            text_after=self.text_after,
            text_before=self.text_before,
            utf8_clusters=self.utf8_clusters,
        )
        if hb_out.stderr:
            warnings.warn("`hb-view` returned an error: %s" % (hb_out.stderr))
            return None
        return json.loads(unicode(hb_out.stdout))

    def _toImage(
        self, text=None, output_format="svg", font_size=None, output_file=False
    ):
        """Method to call hb_view with the desired ouput format and get back:

        Args:
            text (unicode, optional): optional text, otherwise uses self.text
            output_format (str): 'svg' | 'png' | 'pdf' | 'ansi' | 'ps' | 'eps'
            font_size (int): the font size to use, 0 means 'upem', use self.font_size if omitted
            output_file (unicode): path to output_file, or False if stdout should be used

        Returns:
             None: if `hb-view` is not accessible or if an error occurs
             str: SVG (UTF-8), PNG or PDF buffer
             str: the output file path (UTF-8) if output_file was provided and the file was created
        """
        if not HB_VIEW:
            warnings.warn("`hb-view` not available")
            return None
        else:
            if font_size == 0:
                self.font_size = 0
                font_size = "upem"
            elif font_size:
                font_size = font_size
                self.font_size = font_size
            else:
                font_size = self.font_size
            text = text if text else self.text
            self.text = text
            hb_in = unicode(text).encode("utf-8")
            hb_out = self._hb_view(
                _encoding="UTF-8",
                _in=hb_in,
                annotate=self.annotate,
                background=self.background,
                bot=self.bot,
                cluster_level=self.cluster_level,
                direction=self.direction,
                eot=self.eot,
                face_index=self.face_index,
                features=",".join(self.features),
                font_file=self.font_file,
                font_size=font_size,
                foreground=self.foreground,
                language=self.language,
                line_space=self.line_space,
                margin=self.margin
                if type(self.margin) == int
                else " ".join(str(i) for i in self.margin),
                no_glyph_names=self.use_glyph_indexes,
                normalize_glyphs=self.normalize_glyphs,
                num_iterations=self.num_iterations,
                output_file=output_file if output_file else False,
                output_format=output_format,
                preserve_default_ignorables=self.preserve_default_ignorables,
                script=self.script,
                shapers=",".join(self.use_shapers),
                show_extents=False,
                show_text=False,
                show_unicode=False,
                text_after=self.text_after,
                text_before=self.text_before,
                utf8_clusters=self.utf8_clusters,
            )
            if hb_out.stderr:
                warnings.warn("`hb-view` returned an error: %s" % (hb_out.stderr))
                return None
            if output_file:
                output_path = os.path.realpath(output_file)
                if os.path.exists(output_path):
                    return output_path
                else:
                    warnings.warn("`hb-view` did not create file: %s" % (output_path))
                    return None
            else:
                return hb_out.stdout

    def toSVG(self, text=None, font_size=None, output_file=""):
        """

        Args:
            text (str):
            font_size (int):
            output_file (str):

        Returns:
            str:
                * empty string if an error occurred
                * SVG (UTF-8) content
                * the output file path (UTF-8) if output_file was provided and the file was created
        """
        data = self._toImage(
            text=text, font_size=font_size, output_file=output_file, output_format="svg"
        )
        if data:
            return data
        else:
            return ""

    def toPNG(self, text=None, font_size=None, output_file=""):
        """

        Args:
            text (str):
            font_size (int):
            output_file (str):

        Returns:
            str:
                * empty string if an error occurred
                * PNG buffer
                * the output file path (UTF-8) if output_file was provided and the file was created
        """
        data = self._toImage(
            text=text, font_size=font_size, output_file=output_file, output_format="png"
        )
        if data:
            return data
        else:
            return ""

    def toPDF(self, text=None, font_size=None, output_file=""):
        """

        Args:
            text (str):
            font_size (int):
            output_file (str):

        Returns:
            str:
                * empty string if an error occurred
                * PDF buffer
                * the output file path (UTF-8) if output_file was provided and the file was created
        """
        data = self._toImage(
            text=text, font_size=font_size, output_file=output_file, output_format="pdf"
        )
        if data:
            return data
        else:
            return ""


def test():
    hb = HarfBuzzRenderer()
    hb.updateShapers()
    print(hb.all_shapers)
    hb.openFont("test/EBGaramond12-Regular.otf")
    text = "Office staff"
    print(hb.toJson(text=text))
    hb.margin = 0
    hb.features = ["+dlig"]
    size = 72
    print(hb.toSVG(text=text, font_size=size))
    print(
        hb.toSVG(text=text, font_size=size, output_file="test/EBGaramond12-Regular.svg")
    )
    print(
        hb.toPNG(text=text, font_size=size, output_file="test/EBGaramond12-Regular.png")
    )
    print(
        hb.toPDF(text=text, font_size=size, output_file="test/EBGaramond12-Regular.pdf")
    )
    help(hb)


def main():
    if len(sys.argv) > 1:
        hb = HarfBuzzRenderer()
        hb.openFont(sys.argv[1])
        hb.text = unicode(sys.argv[2] if len(sys.argv) > 2 else "O")
        hb.font_size = int(sys.argv[3] if len(sys.argv) > 3 else "20")
        print(hb.toSVG())
    else:
        print("hb_render font_file [text] [font_size]")


if __name__ == "__main__":
    main()
</file>

</files>
